### YamlMime:UniversalReference
items:
  - uid: sp-sample-webparts.ITodoDataProvider
    name: ITodoDataProvider
    fullName: ITodoDataProvider
    children:
      - sp-sample-webparts.ITodoDataProvider.createItem
      - sp-sample-webparts.ITodoDataProvider.deleteItem
      - sp-sample-webparts.ITodoDataProvider.maxNumberOfTasks
      - sp-sample-webparts.ITodoDataProvider.readItems
      - sp-sample-webparts.ITodoDataProvider.readLists
      - sp-sample-webparts.ITodoDataProvider.selectedList
      - sp-sample-webparts.ITodoDataProvider.updateItem
    langs:
      - typeScript
    type: interface
    summary: >-
      The data provider interface implemented by MockTodoDataProvider and
      TodoDataProvider.
    package: sp-sample-webparts
  - uid: sp-sample-webparts.ITodoDataProvider.createItem
    name: createItem
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      createItem will send REST call to add an item in the current .

      And it also fetch the newest version of list items to sync the current
      list.
    syntax:
      content: 'function createItem(title: string)'
      parameters:
        - id: title
          type:
            - string
          description: |
            is the title of item that will be created in current list.
      return:
        type:
          - 'Promise<@sp-sample-webparts.ITodoTask[]>'
  - uid: sp-sample-webparts.ITodoDataProvider.deleteItem
    name: deleteItem
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      deleteItem will send REST call to remove an item in the current list.

      And it also fetch the newest version of list items to sync the current
      list.
    syntax:
      content: 'function deleteItem(itemDeleted: ITodoTask)'
      parameters:
        - id: itemDeleted
          type:
            - '@sp-sample-webparts.ITodoTask'
          description: |
            is the item which will be deleted in current list.
      return:
        type:
          - 'Promise<@sp-sample-webparts.ITodoTask[]>'
  - uid: sp-sample-webparts.ITodoDataProvider.maxNumberOfTasks
    name: maxNumberOfTasks
    fullName: maxNumberOfTasks
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      The max number of tasks show in the Todo list.

      It should be always the sam with the maxNumberOfTasks in web part
      properties.
    syntax:
      content: number maxNumberOfTasks
      return:
        type:
          - number
  - uid: sp-sample-webparts.ITodoDataProvider.readItems
    name: readItems
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      readItems will send REST call to fetch the a number up to maxNumberOfTasks
      of items

      in the current.
    syntax:
      content: function readItems()
      parameters: []
      return:
        type:
          - 'Promise<@sp-sample-webparts.ITodoTask[]>'
  - uid: sp-sample-webparts.ITodoDataProvider.readLists
    name: readLists
    children: []
    type: method
    langs:
      - typeScript
    summary: readLists will fetch the information of all the lists in current site.
    syntax:
      content: function readLists()
      parameters: []
      return:
        type:
          - 'Promise<@sp-sample-webparts.ITodoTaskList[]>'
  - uid: sp-sample-webparts.ITodoDataProvider.selectedList
    name: selectedList
    fullName: selectedList
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      The current selected list.
      It should be always the same with the list in web part properties.
    syntax:
      content: ITodoTaskList selectedList
      return:
        type:
          - '@sp-sample-webparts.ITodoTaskList'
  - uid: sp-sample-webparts.ITodoDataProvider.updateItem
    name: updateItem
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      updateItem will send REST call to update(merge) an item in the current
      list.

      And it also fetch the newest version of list items to sync the current
      list.
    syntax:
      content: 'function updateItem(itemUpdated: ITodoTask)'
      parameters:
        - id: itemUpdated
          type:
            - '@sp-sample-webparts.ITodoTask'
          description: |
            is the item which will be merged to current list.
      return:
        type:
          - 'Promise<@sp-sample-webparts.ITodoTask[]>'
