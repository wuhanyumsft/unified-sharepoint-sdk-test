### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties'
    name: ICompactCardLayoutProperties
    fullName: ICompactCardLayoutProperties
    children:
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.displayMode'
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.items'
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.onClickItem'
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.onDeleteItem'
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.onEditItem'
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.onRenderItem'
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.onReorderItem'
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.shouldDisplayImage'
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.strings'
      - '@ms/sp-component-layouts.ICompactCardLayoutProperties.width'
    langs:
      - typeScript
    type: interface
    summary: ''
    package: '@ms/sp-component-layouts'
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.displayMode'
    name: displayMode
    fullName: displayMode
    children: []
    langs:
      - typeScript
    type: property
    summary: A boolean to indicate whether current mode is edit mode or not.
    syntax:
      content: DisplayMode displayMode
      return:
        type:
          - DisplayMode
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.items'
    name: items
    fullName: items
    children: []
    langs:
      - typeScript
    type: property
    summary: The data of each item in the compact card list.
    syntax:
      content: 'ICompactCardItem[] items'
      return:
        type:
          - '@@ms/sp-component-layouts.ICompactCardItem[]'
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.onClickItem'
    name: onClickItem
    fullName: onClickItem
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Handler function called when an item is clicked.

      Use the event in callback parameters to indicate by which method it's
      triggered.
    syntax:
      content: '(index: number, event: SyntheticEvent<HTMLElement>) => void onClickItem'
      return:
        type:
          - '(index: number, event: SyntheticEvent<HTMLElement>) => void'
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.onDeleteItem'
    name: onDeleteItem
    fullName: onDeleteItem
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Handler function called when delete an item from the compact card list.

      Use the event in callback parameters to indicate by which method it's
      triggered.

      The callback should return a promise, so the layout can properly manage
      the focus after item is deleted.
    syntax:
      content: >-
        (index: number, event: SyntheticEvent<HTMLElement>) => Promise<void>
        onDeleteItem
      return:
        type:
          - '(index: number, event: SyntheticEvent<HTMLElement>) => Promise<void>'
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.onEditItem'
    name: onEditItem
    fullName: onEditItem
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Handler function called when edit an item.

      Use the event in callback parameters to indicate by which method it's
      triggered.
    syntax:
      content: '(index: number, event: SyntheticEvent<HTMLElement>) => void onEditItem'
      return:
        type:
          - '(index: number, event: SyntheticEvent<HTMLElement>) => void'
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.onRenderItem'
    name: onRenderItem
    fullName: onRenderItem
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The callback which gives the flexiblity for consumer to render their own
      control, just using the layout.
    syntax:
      content: '(index: number, itemProps: ICompactCardProps) => Element onRenderItem'
      return:
        type:
          - '(index: number, itemProps: ICompactCardProps) => Element'
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.onReorderItem'
    name: onReorderItem
    fullName: onReorderItem
    children: []
    langs:
      - typeScript
    type: property
    summary: Handler function called when reorder items in compact card list.
    syntax:
      content: '(oldIndex: number, newIndex: number) => void onReorderItem'
      return:
        type:
          - '(oldIndex: number, newIndex: number) => void'
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.shouldDisplayImage'
    name: shouldDisplayImage
    fullName: shouldDisplayImage
    children: []
    langs:
      - typeScript
    type: property
    summary: A boolean to indicate whether the card contains a image area.
    syntax:
      content: boolean shouldDisplayImage
      return:
        type:
          - boolean
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.strings'
    name: strings
    fullName: strings
    children: []
    langs:
      - typeScript
    type: property
    summary: The strings used by compact card layout.
    syntax:
      content: ICompactCardStrings strings
      return:
        type:
          - '@@ms/sp-component-layouts.ICompactCardStrings'
  - uid: '@ms/sp-component-layouts.ICompactCardLayoutProperties.width'
    name: width
    fullName: width
    children: []
    langs:
      - typeScript
    type: property
    summary: A number to indicate the width of the current layout.
    syntax:
      content: number width
      return:
        type:
          - number
