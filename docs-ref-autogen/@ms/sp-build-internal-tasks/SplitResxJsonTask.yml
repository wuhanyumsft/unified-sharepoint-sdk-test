### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-build-internal-tasks.SplitResxJsonTask'
    name: SplitResxJsonTask
    fullName: SplitResxJsonTask
    children:
      - '@ms/sp-build-internal-tasks.SplitResxJsonTask.executeTask'
      - '@ms/sp-build-internal-tasks.SplitResxJsonTask.constructor'
    langs:
      - typeScript
    type: class
    summary: >
      A specialized task which reads a set of JSON files from a directory,
      unflattens the JSON file,

      and splits it up and writes sections of it to various locations based on
      keys in the JSON.

      This task should not be run as part of a regular build, rather just the
      localization import

      task which happens when any file is checked into /common/localization

      INPUT
       //common/localization/fr-fr/strings.resx.json:
         {
           "OpenDoors;_GzngDBMIZumZWTwNVe504Q;apps/ProjectA": "Open the pod bay doors, HAL.",
           "SorryDave;_iEwJ6o5oUDarsLUd2K7jsw;webparts/ProjectB": "I'm sorry, Dave. I'm afraid I can't do that."
         }
      OUTPUT
       In non-"repo" mode:
         //apps/ProjectA/intl/fr-fr.json:
           {
             "_GzngDBMIZumZWTwNVe504Q" {
               "OpenDoors": "Open the pod bay doors, HAL."
             }
           }

         //webparts/ProjectB/intl/fr-fr.json:
           {
             "_iEwJ6o5oUDarsLUd2K7jsw": {
               "SorryDave": "I'm sorry, Dave. I'm afraid I can't do that."
             }
           }

      In "repo" mode:
         Set a commit message on buildConfig.properties["repoCommitMessage"]
         Set an array of changes on buildConfig.properties["repoFileChanges"]
    extends:
      name: >-
        @@ms/sp-build-internal-tasks.LocalizeGulpTask<@@ms/sp-build-internal-tasks.ISplitResxJsonTaskConfig>
    package: '@ms/sp-build-internal-tasks'
  - uid: '@ms/sp-build-internal-tasks.SplitResxJsonTask.executeTask'
    name: executeTask
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function executeTask(gulp: any, completeCallback: (error?: any) => any)'
      parameters:
        - id: gulp
          type:
            - any
          description: ''
        - id: completeCallback
          type:
            - '(error?: any) => any'
          description: ''
      return:
        type:
          - ReadWriteStream
  - uid: '@ms/sp-build-internal-tasks.SplitResxJsonTask.constructor'
    name: SplitResxJsonTask
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: new SplitResxJsonTask()
      parameters: []
