### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-pages.IPageDataProvider'
    name: IPageDataProvider
    fullName: IPageDataProvider
    children:
      - '@ms/sp-pages.IPageDataProvider.addPageToQuickLaunch'
      - '@ms/sp-pages.IPageDataProvider.checkOutAndReloadPage'
      - '@ms/sp-pages.IPageDataProvider.checkOutPage'
      - '@ms/sp-pages.IPageDataProvider.createBlankPage'
      - '@ms/sp-pages.IPageDataProvider.discardPage'
      - '@ms/sp-pages.IPageDataProvider.ensureTitleResource'
      - '@ms/sp-pages.IPageDataProvider.getClassicPubNavProviderType'
      - '@ms/sp-pages.IPageDataProvider.getHomePageUrl'
      - '@ms/sp-pages.IPageDataProvider.getPageUrl'
      - '@ms/sp-pages.IPageDataProvider.getPreviousPageVersionInfo'
      - '@ms/sp-pages.IPageDataProvider.loadPage'
      - '@ms/sp-pages.IPageDataProvider.promotePageToNews'
      - '@ms/sp-pages.IPageDataProvider.publishPage'
      - '@ms/sp-pages.IPageDataProvider.savePageToServer'
      - '@ms/sp-pages.IPageDataProvider.savePageToServerAsDraft'
      - '@ms/sp-pages.IPageDataProvider.savePageToServerV1'
    langs:
      - typeScript
    type: interface
    summary: |-
      Provide data access layer between publishing UI and server side REST API
      Publishing rest API lives in /_api/sp.publishing
    package: '@ms/sp-pages'
  - uid: '@ms/sp-pages.IPageDataProvider.addPageToQuickLaunch'
    name: addPageToQuickLaunch
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addPageToQuickLaunch(pageTitle: string, pageUrl: string)'
      parameters:
        - id: pageTitle
          type:
            - string
          description: ''
        - id: pageUrl
          type:
            - string
          description: ''
      return:
        type:
          - Promise<INavLink>
  - uid: '@ms/sp-pages.IPageDataProvider.checkOutAndReloadPage'
    name: checkOutAndReloadPage
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkOutAndReloadPage(listItemId: number)'
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
      return:
        type:
          - Promise<@@ms/sp-pages.PageFieldData>
  - uid: '@ms/sp-pages.IPageDataProvider.checkOutPage'
    name: checkOutPage
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkOutPage(listItemId: number)'
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
      return:
        type:
          - Promise<boolean>
  - uid: '@ms/sp-pages.IPageDataProvider.createBlankPage'
    name: createBlankPage
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createBlankPage(promotedState: PromotedState, pageLayoutType?:
        string)
      parameters:
        - id: promotedState
          type:
            - PromotedState
          description: ''
        - id: pageLayoutType
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<@@ms/sp-pages.PageFieldData>
  - uid: '@ms/sp-pages.IPageDataProvider.discardPage'
    name: discardPage
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function discardPage(listItemId: number)'
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
      return:
        type:
          - Promise<@@ms/sp-pages.PageFieldData>
  - uid: '@ms/sp-pages.IPageDataProvider.ensureTitleResource'
    name: ensureTitleResource
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ensureTitleResource()
      parameters: []
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-pages.IPageDataProvider.getClassicPubNavProviderType'
    name: getClassicPubNavProviderType
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getClassicPubNavProviderType(mapProviderName: string)'
      parameters:
        - id: mapProviderName
          type:
            - string
          description: ''
      return:
        type:
          - Promise<ClassicPubNavProviderType>
  - uid: '@ms/sp-pages.IPageDataProvider.getHomePageUrl'
    name: getHomePageUrl
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getHomePageUrl()
      parameters: []
      return:
        type:
          - Promise<string>
  - uid: '@ms/sp-pages.IPageDataProvider.getPageUrl'
    name: getPageUrl
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPageUrl(listItemId: number)'
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
      return:
        type:
          - Promise<String>
  - uid: '@ms/sp-pages.IPageDataProvider.getPreviousPageVersionInfo'
    name: getPreviousPageVersionInfo
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPreviousPageVersionInfo(listItemId: number)'
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
      return:
        type:
          - Promise<@@ms/sp-pages.ILastVersionInfo>
  - uid: '@ms/sp-pages.IPageDataProvider.loadPage'
    name: loadPage
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function loadPage(url: string)'
      parameters:
        - id: url
          type:
            - string
          description: ''
      return:
        type:
          - Promise<_IPreloadedData>
  - uid: '@ms/sp-pages.IPageDataProvider.promotePageToNews'
    name: promotePageToNews
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function promotePageToNews(listItemId: number)'
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-pages.IPageDataProvider.publishPage'
    name: publishPage
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function publishPage(listItemId: number)'
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-pages.IPageDataProvider.savePageToServer'
    name: savePageToServer
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function savePageToServer(listItemId: number, fieldsToUpdate: [key:
        string]: any, shouldSaveAsDraft: boolean, componentName: string)
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
        - id: fieldsToUpdate
          type:
            - '[key: string]: any'
          description: ''
        - id: shouldSaveAsDraft
          type:
            - boolean
          description: ''
        - id: componentName
          type:
            - string
          description: ''
      return:
        type:
          - Promise<boolean>
  - uid: '@ms/sp-pages.IPageDataProvider.savePageToServerAsDraft'
    name: savePageToServerAsDraft
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function savePageToServerAsDraft(listItemId: number, fieldsToUpdate:
        [key: string]: any)
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
        - id: fieldsToUpdate
          type:
            - '[key: string]: any'
          description: ''
      return:
        type:
          - Promise<boolean>
  - uid: '@ms/sp-pages.IPageDataProvider.savePageToServerV1'
    name: savePageToServerV1
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function savePageToServerV1(listItemId: number, fieldsToUpdate: [key:
        string]: any)
      parameters:
        - id: listItemId
          type:
            - number
          description: ''
        - id: fieldsToUpdate
          type:
            - '[key: string]: any'
          description: ''
      return:
        type:
          - Promise<boolean>
