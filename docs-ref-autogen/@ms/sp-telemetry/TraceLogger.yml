### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-telemetry.TraceLogger'
    name: TraceLogger
    fullName: TraceLogger
    children:
      - '@ms/sp-telemetry.TraceLogger.logError'
      - '@ms/sp-telemetry.TraceLogger.logErrorData'
      - '@ms/sp-telemetry.TraceLogger.logErrorWithLogEntry'
      - '@ms/sp-telemetry.TraceLogger.logVerbose'
      - '@ms/sp-telemetry.TraceLogger.logVerboseData'
      - '@ms/sp-telemetry.TraceLogger.logVerboseWithLogEntry'
      - '@ms/sp-telemetry.TraceLogger.shouldWriteToConsole'
    langs:
      - typeScript
    type: class
    summary: This is used to log traces of failed operations and debugging information.
    package: '@ms/sp-telemetry'
  - uid: '@ms/sp-telemetry.TraceLogger.logError'
    name: logError
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Exception logging

      This shoule be used whenever you want to log something that might in
      future help to debug failures.

      The error parameter is the only required one and basically will be just
      converted to string and

      logged to Debug stream (RealibilityLogs in SLAPI).

      It will also be uploaded to the server immediately and not wait for next
      batch log upload.

      If you don't specify second parameter:eventName

      the event name for all errors logged that way will be same "CaughtError"
      with

      appropriate prefix ("ModernPublish.CaughtError" etc.)

      These two parameters "eventName and resultCode" are there to be used from
      Qos.

      It is not encouraged to use them directly from ErrorHelper but if you do,

      the log will be written with custom event name of following format:

      <Workload>.<eventName>.<resultCode>.Failure, Workload is set in Telemetry
      settings.
    syntax:
      content: >-
        static function logError(source: ILogSource, error: Error, eventName?:
        string, resultCode?: string)
      parameters:
        - id: source
          type:
            - '@@ms/sp-telemetry.ILogSource'
          description: ''
        - id: error
          type:
            - Error
          description: ''
        - id: eventName
          type:
            - string
          description: ''
          optional: true
        - id: resultCode
          type:
            - string
          description: ''
          optional: true
  - uid: '@ms/sp-telemetry.TraceLogger.logErrorData'
    name: logErrorData
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Exception logging intended to replace to logError.

      Uses the ILogErrorData interface to prevent excessive undefined parameters

      when calling this function.

      This shoule be used whenever you want to log something that might in
      future help to

      debug failures.

      It will also be uploaded to the server immediately and not wait for next
      batch log upload.
    syntax:
      content: 'static function logErrorData(data: ILogErrorData)'
      parameters:
        - id: data
          type:
            - '@@ms/sp-telemetry.ILogErrorData'
          description: ''
  - uid: '@ms/sp-telemetry.TraceLogger.logErrorWithLogEntry'
    name: logErrorWithLogEntry
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Exception logging With LogEntry

      error message should be packed into logProperties

      LogType should be LogType.Error and LogProperties should have
      {error:errorMessage}

      Do NOT add PII data!
    syntax:
      content: >-
        static function logErrorWithLogEntry(source: ILogSource, logEntry:
        ILogEntry, eventName?: string, resultCode?: string)
      parameters:
        - id: source
          type:
            - '@@ms/sp-telemetry.ILogSource'
          description: ''
        - id: logEntry
          type:
            - '@@ms/sp-telemetry.ILogEntry'
          description: ''
        - id: eventName
          type:
            - string
          description: ''
          optional: true
        - id: resultCode
          type:
            - string
          description: ''
          optional: true
  - uid: '@ms/sp-telemetry.TraceLogger.logVerbose'
    name: logVerbose
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Trace logging

      The idea here is that verbose logs don't get uploaded to the server unless

      a failure is logged using ErrorHelper.log method.

      There is a circular buffer that holds last 50 verbose logs from all
      scenarios and

      it is only flushed and uploaded in case a failure is logged.

      That way whenever you get a failure event with message you also have all
      supportive verbose messages

      you logged throughout your scenario execution (or other scenarios).

      And hopefully that would help you get to the bottom of what exactly went
      wrong.

      If no failure happens and your scenario succeeds, verbose logs will be
      just left in the buffer

      and most likely overriden by next scenario that logs something verbose.
    syntax:
      content: >-
        static function logVerbose(source: ILogSource, message: string,
        eventName?: string)
      parameters:
        - id: source
          type:
            - '@@ms/sp-telemetry.ILogSource'
          description: ''
        - id: message
          type:
            - string
          description: ''
        - id: eventName
          type:
            - string
          description: ''
          optional: true
  - uid: '@ms/sp-telemetry.TraceLogger.logVerboseData'
    name: logVerboseData
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verbose logging intended to replace to logVerbose.

      The idea here is that verbose logs don't get uploaded to the server unless

      a failure is logged using ErrorHelper.log method.

      There is a circular buffer that holds last 50 verbose logs from all
      scenarios and

      it is only flushed and uploaded in case a failure is logged.

      That way whenever you get a failure event with message you also have all
      supportive verbose messages

      you logged throughout your scenario execution (or other scenarios).

      And hopefully that would help you get to the bottom of what exactly went
      wrong.

      If no failure happens and your scenario succeeds, verbose logs will be
      just left in the buffer

      and most likely overriden by next scenario that logs something verbose.
    syntax:
      content: 'static function logVerboseData(data: ILogVerboseData)'
      parameters:
        - id: data
          type:
            - '@@ms/sp-telemetry.ILogVerboseData'
          description: ''
  - uid: '@ms/sp-telemetry.TraceLogger.logVerboseWithLogEntry'
    name: logVerboseWithLogEntry
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function logVerboseWithLogEntry(source: ILogSource, logEntry:
        ILogEntry, eventName?: string)
      parameters:
        - id: source
          type:
            - '@@ms/sp-telemetry.ILogSource'
          description: ''
        - id: logEntry
          type:
            - '@@ms/sp-telemetry.ILogEntry'
          description: ''
        - id: eventName
          type:
            - string
          description: ''
          optional: true
  - uid: '@ms/sp-telemetry.TraceLogger.shouldWriteToConsole'
    name: shouldWriteToConsole
    fullName: shouldWriteToConsole
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Indicates if the log entries should be output to the console.
      This flag is set to true by default.
    syntax:
      content: static boolean shouldWriteToConsole
      return:
        type:
          - boolean
