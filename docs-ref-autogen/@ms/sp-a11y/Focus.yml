### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-a11y.Focus'
    name: Focus
    fullName: Focus
    children:
      - '@ms/sp-a11y.Focus.focusInside'
      - '@ms/sp-a11y.Focus.focusOutOf'
      - '@ms/sp-a11y.Focus.focusTo'
      - '@ms/sp-a11y.Focus.getFirstFocusableChild'
      - '@ms/sp-a11y.Focus.getFocusableChildren'
      - '@ms/sp-a11y.Focus.getFocusableDescendants'
      - '@ms/sp-a11y.Focus.getFocusableParent'
      - '@ms/sp-a11y.Focus.getFocusableSiblings'
      - '@ms/sp-a11y.Focus.getNextFocusableSibling'
      - '@ms/sp-a11y.Focus.getPrevFocusableSibling'
      - '@ms/sp-a11y.Focus.isElementFocusable'
    langs:
      - typeScript
    type: class
    summary: >-
      Utility methods that help with finding focusable elements in a DOM tree
      and navigating the focus between elements.

      All the methods use the concept of 'Focusable Sub-Tree' defined as
      follows:

      For any given DOM tree, the Focusable Sub-Tree is the sub-tree of DOM
      elements that are focusable except the root.

      A focusable element is an element that browsers can set the focus to. For
      more details refer to the

      documentations for isElementFocusable method.
    package: '@ms/sp-a11y'
  - uid: '@ms/sp-a11y.Focus.focusInside'
    name: focusInside
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Navigates focus inside the element by setting focus on its first child in
      its Focusable Sub-Tree
    syntax:
      content: 'static function focusInside(element: HTMLElement)'
      parameters:
        - id: element
          type:
            - HTMLElement
          description: ''
      return:
        type:
          - boolean
  - uid: '@ms/sp-a11y.Focus.focusOutOf'
    name: focusOutOf
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Navigates focus to the first focusable parent of the element. topElement
      parameter can be used to scope the
       parent search to a specific DOM tree. topElement defaults to document body.
    syntax:
      content: 'static function focusOutOf(element: HTMLElement, root: HTMLElement)'
      parameters:
        - id: element
          type:
            - HTMLElement
          description: ''
        - id: root
          type:
            - HTMLElement
          description: ''
      return:
        type:
          - boolean
  - uid: '@ms/sp-a11y.Focus.focusTo'
    name: focusTo
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Navigates focus to the element. If the element is not focusable, tries
      setting the focus inside the element
    syntax:
      content: 'static function focusTo(element: HTMLElement)'
      parameters:
        - id: element
          type:
            - HTMLElement
          description: ''
      return:
        type:
          - boolean
  - uid: '@ms/sp-a11y.Focus.getFirstFocusableChild'
    name: getFirstFocusableChild
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the first focusable child of a given element. The return value is
      equivalent of the first element

      of getFocusableChildren, but this method is more performant.
    syntax:
      content: >-
        static function getFirstFocusableChild(elem: HTMLElement,
        ignoreTabIndex: boolean)
      parameters:
        - id: elem
          type:
            - HTMLElement
          description: ''
        - id: ignoreTabIndex
          type:
            - boolean
          description: ''
      return:
        type:
          - HTMLElement
  - uid: '@ms/sp-a11y.Focus.getFocusableChildren'
    name: getFocusableChildren
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets all the immediate children of the given element's Focusable Sub-Tree.
      The order is the same as

      the default tab order of the elements.
    syntax:
      content: >-
        static function getFocusableChildren(element: HTMLElement,
        ignoreTabIndex: boolean)
      parameters:
        - id: element
          type:
            - HTMLElement
          description: ''
        - id: ignoreTabIndex
          type:
            - boolean
          description: ''
  - uid: '@ms/sp-a11y.Focus.getFocusableDescendants'
    name: getFocusableDescendants
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets all the descendants of the given element's Focusable Sub-Tree. The
      order is the same as

      the default tab order of the elements.
    syntax:
      content: >-
        static function getFocusableDescendants(element: HTMLElement,
        ignoreTabIndex: boolean, descendants?: HTMLElement[])
      parameters:
        - id: element
          type:
            - HTMLElement
          description: ''
        - id: ignoreTabIndex
          type:
            - boolean
          description: ''
        - id: descendants
          type:
            - 'HTMLElement[]'
          description: ''
          optional: true
  - uid: '@ms/sp-a11y.Focus.getFocusableParent'
    name: getFocusableParent
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the first focusable parent of a given element. The root parameter can
      be provided to scope the

      search inside a given tree, otherwise the root defaults document body.
    syntax:
      content: >-
        static function getFocusableParent(element: HTMLElement, root?:
        HTMLElement)
      parameters:
        - id: element
          type:
            - HTMLElement
          description: ''
        - id: root
          type:
            - HTMLElement
          description: ''
          optional: true
      return:
        type:
          - HTMLElement
  - uid: '@ms/sp-a11y.Focus.getFocusableSiblings'
    name: getFocusableSiblings
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets all the siblings of the given element inside the given root's
      Focusable Sub-Tree. The order is the

      same as the default tab order of the elements. The root defaults to
      document body.
    syntax:
      content: >-
        static function getFocusableSiblings(element: HTMLElement, root?:
        HTMLElement)
      parameters:
        - id: element
          type:
            - HTMLElement
          description: ''
        - id: root
          type:
            - HTMLElement
          description: ''
          optional: true
  - uid: '@ms/sp-a11y.Focus.getNextFocusableSibling'
    name: getNextFocusableSibling
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the next focusable sibling of the given element (assuming circular
      navigation)
    syntax:
      content: >-
        static function getNextFocusableSibling(element: HTMLElement, root?:
        HTMLElement)
      parameters:
        - id: element
          type:
            - HTMLElement
          description: ''
        - id: root
          type:
            - HTMLElement
          description: ''
          optional: true
      return:
        type:
          - HTMLElement
  - uid: '@ms/sp-a11y.Focus.getPrevFocusableSibling'
    name: getPrevFocusableSibling
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the previous focusable sibling of the given element (assuming
      circular navigation)
    syntax:
      content: >-
        static function getPrevFocusableSibling(element: HTMLElement, root?:
        HTMLElement)
      parameters:
        - id: element
          type:
            - HTMLElement
          description: ''
        - id: root
          type:
            - HTMLElement
          description: ''
          optional: true
      return:
        type:
          - HTMLElement
  - uid: '@ms/sp-a11y.Focus.isElementFocusable'
    name: isElementFocusable
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Checks if an element is independently (regardless of its children)
      focusable.

      A DOM element is focusable if it meets all these requirements:

      - Its hidden property (element.hidden) returns false.

      - Its offsetParent property (element.offsetParent) returns true. This
      ensures that a non-fixed element
         is not hidden, but it doesn't work for fixed elements.
      - In its computed style, 'display' !== 'none' and 'visibility' !==
      'hidden'. This ensures the element is visible.

      - The tabindex attribute value is not negative. (Not checked if
      ignoreTabIndex input parameter is true)

      - It meets at least one of these conditions:
         1. <button>, <input>, <select> or <textarea> element that is not disabled
         2. <a> element with non-empty href attribute
         3. contenteditable attribute set to true
      Special case for compliance with office-ui-fabric-react:
      office-ui-fabric-react uses data-is-focusable attribute

      for all elements that could be focusable inside a FocusZone and uses
      tabindex=0 to set the focus currently

      focused element and all other elements that that are not currently focused
      have tabindex=-1. This can hide those

      actually focusable elements from a standard search (because their tabindex
      is -1), therefore the ignoreTabIndex

      input parameter is provided to make sure those elements are discoverable.
      In case you have office-ui-fabric-react

      controls in your application, you may want to use this parameter depending
      on your scenario. Otherwise, you can

      ignore the ignoreTabIndex parameter.
    syntax:
      content: >-
        static function isElementFocusable(elem: HTMLElement, ignoreTabIndex:
        boolean)
      parameters:
        - id: elem
          type:
            - HTMLElement
          description: ''
        - id: ignoreTabIndex
          type:
            - boolean
          description: ''
      return:
        type:
          - boolean
