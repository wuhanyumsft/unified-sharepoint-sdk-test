### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-filepicker.ExtensionsUtility'
    name: ExtensionsUtility
    fullName: ExtensionsUtility
    children:
      - '@ms/sp-filepicker.ExtensionsUtility.constructor'
      - '@ms/sp-filepicker.ExtensionsUtility.getOrderedExtensions'
      - '@ms/sp-filepicker.ExtensionsUtility.isValidFileExtension'
      - '@ms/sp-filepicker.ExtensionsUtility.unionExtensions'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@@ms/sp-filepicker.ExtensionsUtility'
    package: '@ms/sp-filepicker'
  - uid: '@ms/sp-filepicker.ExtensionsUtility.constructor'
    name: ExtensionsUtility
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new ExtensionsUtility(extensions: Set<string>)'
      parameters:
        - id: extensions
          type:
            - Set<string>
          description: ''
  - uid: '@ms/sp-filepicker.ExtensionsUtility.getOrderedExtensions'
    name: getOrderedExtensions
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Orders the extensions based on on whether to push document extensions to
      the end of the list of the ordered

      extensions. Useful for locations where a limit on extensions must be
      applied,

      thus requiring to prioritize extensions based on application type.

      For example, with 200+ extensions for documents, image & page extension
      list which are much smaller

      should be prioritized.
    syntax:
      content: 'function getOrderedExtensions(documentExtensionsLast: boolean)'
      parameters:
        - id: documentExtensionsLast
          type:
            - boolean
          description: >
            Whether extensions associated with non-image/page types should be
            last.
  - uid: '@ms/sp-filepicker.ExtensionsUtility.isValidFileExtension'
    name: isValidFileExtension
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isValidFileExtension(fileName: string)'
      parameters:
        - id: fileName
          type:
            - string
          description: ''
      return:
        type:
          - boolean
  - uid: '@ms/sp-filepicker.ExtensionsUtility.unionExtensions'
    name: unionExtensions
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function unionExtensions(itemTypesSet: Set<FilePickerItemType>)'
      parameters:
        - id: itemTypesSet
          type:
            - Set<FilePickerItemType>
          description: ''
      return:
        type:
          - Set<string>
