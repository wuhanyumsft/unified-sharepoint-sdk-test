### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-selenium-utilities.SPPagesApp'
    name: SPPagesApp
    fullName: SPPagesApp
    children:
      - '@ms/sp-selenium-utilities.SPPagesApp.controlName'
      - '@ms/sp-selenium-utilities.SPPagesApp.coordinateClick'
      - '@ms/sp-selenium-utilities.SPPagesApp.delay'
      - '@ms/sp-selenium-utilities.SPPagesApp.findCanvas'
      - '@ms/sp-selenium-utilities.SPPagesApp.findCommandBar'
      - '@ms/sp-selenium-utilities.SPPagesApp.findHeaderControl'
      - '@ms/sp-selenium-utilities.SPPagesApp.getBrowserType'
      - '@ms/sp-selenium-utilities.SPPagesApp.getDriver'
      - '@ms/sp-selenium-utilities.SPPagesApp.getElement'
      - '@ms/sp-selenium-utilities.SPPagesApp.goToSitePagesLibrary'
      - '@ms/sp-selenium-utilities.SPPagesApp.goToTestSitePage'
      - '@ms/sp-selenium-utilities.SPPagesApp.instance'
      - '@ms/sp-selenium-utilities.SPPagesApp.login'
      - '@ms/sp-selenium-utilities.SPPagesApp.logout'
      - '@ms/sp-selenium-utilities.SPPagesApp.sendKeys'
      - '@ms/sp-selenium-utilities.SPPagesApp.sendKeysToElement'
      - '@ms/sp-selenium-utilities.SPPagesApp.constructor'
      - '@ms/sp-selenium-utilities.SPPagesApp.takeScreenshot'
      - '@ms/sp-selenium-utilities.SPPagesApp.testContext'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@ms/sp-selenium-utilities'
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.controlName'
    name: controlName
    fullName: controlName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string controlName
      return:
        type:
          - string
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.coordinateClick'
    name: coordinateClick
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function coordinateClick(el: WebElement, location: ILocation)'
      parameters:
        - id: el
          type:
            - WebElement
          description: ''
        - id: location
          type:
            - ILocation
          description: ''
      return:
        type:
          - any
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.delay'
    name: delay
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function delay(timeout: number)'
      parameters:
        - id: timeout
          type:
            - number
          description: ''
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.findCanvas'
    name: findCanvas
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function findCanvas()
      parameters: []
      return:
        type:
          - Promise<boolean>
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.findCommandBar'
    name: findCommandBar
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function findCommandBar()
      parameters: []
      return:
        type:
          - Promise<boolean>
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.findHeaderControl'
    name: findHeaderControl
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function findHeaderControl()
      parameters: []
      return:
        type:
          - Promise<boolean>
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.getBrowserType'
    name: getBrowserType
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getBrowserType()
      parameters: []
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.getDriver'
    name: getDriver
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getDriver()
      parameters: []
      return:
        type:
          - Promise<WebDriver>
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.getElement'
    name: getElement
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getElement()
      parameters: []
      return:
        type:
          - any
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.goToSitePagesLibrary'
    name: goToSitePagesLibrary
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function goToSitePagesLibrary()
      parameters: []
      return:
        type:
          - Promise<boolean>
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.goToTestSitePage'
    name: goToTestSitePage
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function goToTestSitePage()
      parameters: []
      return:
        type:
          - Promise<boolean>
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.instance'
    name: instance
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets an instance of the SPPagesApp app
    syntax:
      content: >-
        static function instance(testContext: TestContext, getFreshInstance?:
        boolean)
      parameters:
        - id: testContext
          type:
            - '@@ms/sp-selenium-utilities.TestContext'
          description: ''
        - id: getFreshInstance
          type:
            - boolean
          description: >
            This should be true after any navigation since the reference will be
            cached
          optional: true
      return:
        type:
          - '@@ms/sp-selenium-utilities.SPPagesApp'
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.login'
    name: login
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function login(loginContext?: ILoginContext, ramps?: [key: string]:
        function)
      parameters:
        - id: loginContext
          type:
            - '@@ms/sp-selenium-utilities.ILoginContext'
          description: ''
          optional: true
        - id: ramps
          type:
            - '[key: string]: function'
          description: ''
          optional: true
      return:
        type:
          - any
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.logout'
    name: logout
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function logout()
      parameters: []
      return:
        type:
          - any
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.sendKeys'
    name: sendKeys
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function sendKeys(keys: string)'
      parameters:
        - id: keys
          type:
            - string
          description: ''
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.sendKeysToElement'
    name: sendKeysToElement
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sendKeysToElement(getElement: () => Promise<WebElement>, keys:
        string)
      parameters:
        - id: getElement
          type:
            - () => Promise<WebElement>
          description: ''
        - id: keys
          type:
            - string
          description: ''
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.constructor'
    name: SPPagesApp
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new SPPagesApp(testContext: TestContext, webDriver: WebDriverWrapper)'
      parameters:
        - id: testContext
          type:
            - '@@ms/sp-selenium-utilities.TestContext'
          description: ''
        - id: webDriver
          type:
            - '@@ms/sp-selenium-utilities.WebDriverWrapper'
          description: ''
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.takeScreenshot'
    name: takeScreenshot
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function takeScreenshot(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: ''
      return:
        type:
          - any
  - uid: '@ms/sp-selenium-utilities.SPPagesApp.testContext'
    name: testContext
    fullName: testContext
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: TestContext testContext
      return:
        type:
          - '@@ms/sp-selenium-utilities.TestContext'
