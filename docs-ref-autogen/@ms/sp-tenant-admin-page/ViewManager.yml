### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-tenant-admin-page.ViewManager'
    name: ViewManager
    fullName: ViewManager
    children:
      - '@ms/sp-tenant-admin-page.ViewManager.DEFAULT_VIEW'
      - '@ms/sp-tenant-admin-page.ViewManager.getDefaultViewColumns'
      - '@ms/sp-tenant-admin-page.ViewManager.getDefaultViewQuery'
      - '@ms/sp-tenant-admin-page.ViewManager.getViewButton'
      - '@ms/sp-tenant-admin-page.ViewManager.getViewIdForExport'
      - '@ms/sp-tenant-admin-page.ViewManager.getViews'
      - '@ms/sp-tenant-admin-page.ViewManager.isBuiltinViewName'
      - '@ms/sp-tenant-admin-page.ViewManager.isCustomViewName'
      - '@ms/sp-tenant-admin-page.ViewManager.loadViews'
      - '@ms/sp-tenant-admin-page.ViewManager.saveView'
      - '@ms/sp-tenant-admin-page.ViewManager.constructor'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@ms/sp-tenant-admin-page'
  - uid: '@ms/sp-tenant-admin-page.ViewManager.DEFAULT_VIEW'
    name: DEFAULT_VIEW
    fullName: DEFAULT_VIEW
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static string DEFAULT_VIEW
      return:
        type:
          - string
  - uid: '@ms/sp-tenant-admin-page.ViewManager.getDefaultViewColumns'
    name: getDefaultViewColumns
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: static function getDefaultViewColumns()
      parameters: []
  - uid: '@ms/sp-tenant-admin-page.ViewManager.getDefaultViewQuery'
    name: getDefaultViewQuery
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: static function getDefaultViewQuery()
      parameters: []
      return:
        type:
          - '@@ms/sp-tenant-admin-page.ISiteQueryConditions'
  - uid: '@ms/sp-tenant-admin-page.ViewManager.getViewButton'
    name: getViewButton
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getViewButton(viewModified?: boolean)'
      parameters:
        - id: viewModified
          type:
            - boolean
          description: ''
          optional: true
      return:
        type:
          - IContextualMenuItem
  - uid: '@ms/sp-tenant-admin-page.ViewManager.getViewIdForExport'
    name: getViewIdForExport
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Export SPList to Excel need a view guid.
      If selected View has no guid, will return a default view guid.
    syntax:
      content: function getViewIdForExport()
      parameters: []
      return:
        type:
          - Promise<string>
  - uid: '@ms/sp-tenant-admin-page.ViewManager.getViews'
    name: getViews
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getViews()
      parameters: []
  - uid: '@ms/sp-tenant-admin-page.ViewManager.isBuiltinViewName'
    name: isBuiltinViewName
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isBuiltinViewName(viewName: string)'
      parameters:
        - id: viewName
          type:
            - string
          description: ''
      return:
        type:
          - boolean
  - uid: '@ms/sp-tenant-admin-page.ViewManager.isCustomViewName'
    name: isCustomViewName
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isCustomViewName(viewName: string)'
      parameters:
        - id: viewName
          type:
            - string
          description: ''
      return:
        type:
          - boolean
  - uid: '@ms/sp-tenant-admin-page.ViewManager.loadViews'
    name: loadViews
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function loadViews()
      parameters: []
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-tenant-admin-page.ViewManager.saveView'
    name: saveView
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function saveView(viewName: string, query: ISiteQueryConditions,
        columns: IColumnState[])
      parameters:
        - id: viewName
          type:
            - string
          description: ''
        - id: query
          type:
            - '@@ms/sp-tenant-admin-page.ISiteQueryConditions'
          description: ''
        - id: columns
          type:
            - '@@ms/sp-tenant-admin-page.IColumnState[]'
          description: ''
  - uid: '@ms/sp-tenant-admin-page.ViewManager.constructor'
    name: ViewManager
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new ViewManager(dispatch: Dispatch<ISiteManagementState>, dataProvider:
        ISiteDataProvider)
      parameters:
        - id: dispatch
          type:
            - Dispatch<@@ms/sp-tenant-admin-page.ISiteManagementState>
          description: ''
        - id: dataProvider
          type:
            - '@@ms/sp-tenant-admin-page.ISiteDataProvider'
          description: ''
