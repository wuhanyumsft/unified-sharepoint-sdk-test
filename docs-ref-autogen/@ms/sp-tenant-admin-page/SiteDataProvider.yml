### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider'
    name: SiteDataProvider
    fullName: SiteDataProvider
    children:
      - '@ms/sp-tenant-admin-page.SiteDataProvider.addView'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.deleteSites'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.getAllViews'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.getDefaultView'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.getFilterValues'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.getSecondaryAdministrators'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.getSiteDescription'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.getSPListId'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.getTenantSharingStatus'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.queryNextSitePage'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.querySites'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.restoreDeletedSites'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.saveView'
      - '@ms/sp-tenant-admin-page.SiteDataProvider.constructor'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@ms/sp-tenant-admin-page'
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.addView'
    name: addView
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addView(viewTitle: string, query: ISiteQueryConditions,
        viewFields: string[])
      parameters:
        - id: viewTitle
          type:
            - string
          description: ''
        - id: query
          type:
            - '@@ms/sp-tenant-admin-page.ISiteQueryConditions'
          description: ''
        - id: viewFields
          type:
            - 'string[]'
          description: ''
      return:
        type:
          - Promise<string>
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.deleteSites'
    name: deleteSites
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteSites(siteUrls: string[])'
      parameters:
        - id: siteUrls
          type:
            - 'string[]'
          description: ''
      return:
        type:
          - 'Promise<@@ms/sp-tenant-admin-page.IResponseRemoveSite[]>'
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.getAllViews'
    name: getAllViews
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getAllViews()
      parameters: []
      return:
        type:
          - Promise<IView>
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.getDefaultView'
    name: getDefaultView
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getDefaultView()
      parameters: []
      return:
        type:
          - Promise<string>
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.getFilterValues'
    name: getFilterValues
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      getFilterValues calls SPList Restful API to get all unique values of a
      field.

      The field is specified by the columnField paramter.
    syntax:
      content: 'function getFilterValues(columnField: string)'
      parameters:
        - id: columnField
          type:
            - string
          description: ''
      return:
        type:
          - 'Promise<string[]>'
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.getSecondaryAdministrators'
    name: getSecondaryAdministrators
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getSecondaryAdministrators(siteId: string)'
      parameters:
        - id: siteId
          type:
            - string
          description: ''
      return:
        type:
          - >-
            Promise<@@ms/sp-tenant-admin-page.IResponseGetSecondaryAdministrator[]>
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.getSiteDescription'
    name: getSiteDescription
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getSiteDescription(siteId: string)'
      parameters:
        - id: siteId
          type:
            - string
          description: ''
      return:
        type:
          - Promise<string>
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.getSPListId'
    name: getSPListId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getSPListId()
      parameters: []
      return:
        type:
          - Promise<string>
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.getTenantSharingStatus'
    name: getTenantSharingStatus
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getTenantSharingStatus()
      parameters: []
      return:
        type:
          - Promise<SharingStatus>
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.queryNextSitePage'
    name: queryNextSitePage
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function queryNextSitePage(queryOptions: ISitesQueryOptions)'
      parameters:
        - id: queryOptions
          type:
            - '@@ms/sp-tenant-admin-page.ISitesQueryOptions'
          description: ''
      return:
        type:
          - 'Promise<@@ms/sp-tenant-admin-page.ISiteInfo[]>'
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.querySites'
    name: querySites
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      querySites will construct a query string based on queryOption.

      the query string will be used when calling SPList Restful API to query the
      SPList.

      This method will all sites if PAGE_ROW_LIMITED is not undefined.

      It will return only first page of sites if PAGE_ROW_LIMITED is defined and
      queryParameters is undefined.

      It will return other pages if queryParameters and PAGE_ROW_LIMITED are
      both provided.
    syntax:
      content: >-
        function querySites(queryOptions: ISitesQueryOptions, queryParameters?:
        string)
      parameters:
        - id: queryOptions
          type:
            - '@@ms/sp-tenant-admin-page.ISitesQueryOptions'
          description: ''
        - id: queryParameters
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@@ms/sp-tenant-admin-page.ISiteInfo[]>'
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.restoreDeletedSites'
    name: restoreDeletedSites
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function restoreDeletedSites(siteUrls: string[])'
      parameters:
        - id: siteUrls
          type:
            - 'string[]'
          description: ''
      return:
        type:
          - Promise<@@ms/sp-tenant-admin-page.IResponseRestoreDeletedSite>
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.saveView'
    name: saveView
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function saveView(viewId: string, viewTitle: string, query:
        ISiteQueryConditions, viewFields: string[])
      parameters:
        - id: viewId
          type:
            - string
          description: ''
        - id: viewTitle
          type:
            - string
          description: ''
        - id: query
          type:
            - '@@ms/sp-tenant-admin-page.ISiteQueryConditions'
          description: ''
        - id: viewFields
          type:
            - 'string[]'
          description: ''
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-tenant-admin-page.SiteDataProvider.constructor'
    name: SiteDataProvider
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: new SiteDataProvider()
      parameters: []
