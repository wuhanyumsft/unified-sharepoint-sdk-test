### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-bingmap.BingMapManager'
    name: BingMapManager
    fullName: BingMapManager
    children:
      - '@ms/sp-bingmap.BingMapManager.constructor'
      - '@ms/sp-bingmap.BingMapManager.cancelInit'
      - '@ms/sp-bingmap.BingMapManager.ensureBingMap'
      - '@ms/sp-bingmap.BingMapManager.getAutoSuggestManager'
      - '@ms/sp-bingmap.BingMapManager.getCenter'
      - '@ms/sp-bingmap.BingMapManager.getGlobalProperties'
      - '@ms/sp-bingmap.BingMapManager.getMapInstance'
      - '@ms/sp-bingmap.BingMapManager.getMapTypeName'
      - '@ms/sp-bingmap.BingMapManager.getPushPinManager'
      - '@ms/sp-bingmap.BingMapManager.getSearchManager'
      - '@ms/sp-bingmap.BingMapManager.getZoomLevel'
      - '@ms/sp-bingmap.BingMapManager.setContainerElement'
      - '@ms/sp-bingmap.BingMapManager.setMapOptions'
      - '@ms/sp-bingmap.BingMapManager.setMapTypeChangedHandler'
      - '@ms/sp-bingmap.BingMapManager.setMapViewChangeEndHandler'
      - '@ms/sp-bingmap.BingMapManager.setViewCenterAt'
    langs:
      - typeScript
    type: class
    summary: BingMapManger class manage all the operations with BingMap SDK.
    package: '@ms/sp-bingmap'
  - uid: '@ms/sp-bingmap.BingMapManager.constructor'
    name: BingMapManager
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new BingMapManager(initMapViewSettings: IBingMapViewSettings,
        pageContext: PageContext)
      parameters:
        - id: initMapViewSettings
          type:
            - '@@ms/sp-bingmap.IBingMapViewSettings'
          description: ''
        - id: pageContext
          type:
            - PageContext
          description: ''
  - uid: '@ms/sp-bingmap.BingMapManager.cancelInit'
    name: cancelInit
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function cancelInit()
      parameters: []
  - uid: '@ms/sp-bingmap.BingMapManager.ensureBingMap'
    name: ensureBingMap
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      returns {Promise<Microsoft.Maps.Map>} a promise which will resolve a map
      instance.
    syntax:
      content: function ensureBingMap()
      parameters: []
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-bingmap.BingMapManager.getAutoSuggestManager'
    name: getAutoSuggestManager
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getAutoSuggestManager()
      parameters: []
      return:
        type:
          - '@@ms/sp-bingmap.IAutoSuggestManager'
  - uid: '@ms/sp-bingmap.BingMapManager.getCenter'
    name: getCenter
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getCenter()
      parameters: []
      return:
        type:
          - Location
  - uid: '@ms/sp-bingmap.BingMapManager.getGlobalProperties'
    name: getGlobalProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getGlobalProperties()
      parameters: []
      return:
        type:
          - Promise<any>
  - uid: '@ms/sp-bingmap.BingMapManager.getMapInstance'
    name: getMapInstance
    children: []
    type: method
    langs:
      - typeScript
    summary: Exposing the map instance only for hacking to fix
    syntax:
      content: function getMapInstance()
      parameters: []
      return:
        type:
          - Map
  - uid: '@ms/sp-bingmap.BingMapManager.getMapTypeName'
    name: getMapTypeName
    children: []
    type: method
    langs:
      - typeScript
    summary: Converts a map type id to map type name.
    syntax:
      content: 'function getMapTypeName(mapTypeId: MapTypeId)'
      parameters:
        - id: mapTypeId
          type:
            - MapTypeId
          description: ''
      return:
        type:
          - MapTypeName
  - uid: '@ms/sp-bingmap.BingMapManager.getPushPinManager'
    name: getPushPinManager
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getPushPinManager()
      parameters: []
      return:
        type:
          - '@@ms/sp-bingmap.IPushPinManager'
  - uid: '@ms/sp-bingmap.BingMapManager.getSearchManager'
    name: getSearchManager
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getSearchManager()
      parameters: []
      return:
        type:
          - '@@ms/sp-bingmap.ISearchManager'
  - uid: '@ms/sp-bingmap.BingMapManager.getZoomLevel'
    name: getZoomLevel
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getZoomLevel()
      parameters: []
      return:
        type:
          - number
  - uid: '@ms/sp-bingmap.BingMapManager.setContainerElement'
    name: setContainerElement
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setContainerElement(containerElement: HTMLElement)'
      parameters:
        - id: containerElement
          type:
            - HTMLElement
          description: ''
  - uid: '@ms/sp-bingmap.BingMapManager.setMapOptions'
    name: setMapOptions
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setMapOptions(options: IMapOptions)'
      parameters:
        - id: options
          type:
            - IMapOptions
          description: ''
  - uid: '@ms/sp-bingmap.BingMapManager.setMapTypeChangedHandler'
    name: setMapTypeChangedHandler
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setMapTypeChangedHandler(handler: (event:
        IMapTypeChangeEventArgs) => void)
      parameters:
        - id: handler
          type:
            - '(event: IMapTypeChangeEventArgs) => void'
          description: ''
  - uid: '@ms/sp-bingmap.BingMapManager.setMapViewChangeEndHandler'
    name: setMapViewChangeEndHandler
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setMapViewChangeEndHandler(handler: () => void)'
      parameters:
        - id: handler
          type:
            - () => void
          description: ''
  - uid: '@ms/sp-bingmap.BingMapManager.setViewCenterAt'
    name: setViewCenterAt
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setViewCenterAt(location: Location, resetZoomLevel: boolean)'
      parameters:
        - id: location
          type:
            - Location
          description: ''
        - id: resetZoomLevel
          type:
            - boolean
          description: ''
