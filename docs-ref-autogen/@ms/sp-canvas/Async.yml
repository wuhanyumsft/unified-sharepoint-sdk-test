### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-canvas.Async'
    name: Async
    fullName: Async
    children:
      - '@ms/sp-canvas.Async.constructor'
      - '@ms/sp-canvas.Async.cancelAnimationFrame'
      - '@ms/sp-canvas.Async.clearImmediate'
      - '@ms/sp-canvas.Async.clearInterval'
      - '@ms/sp-canvas.Async.clearTimeout'
      - '@ms/sp-canvas.Async.debounce'
      - '@ms/sp-canvas.Async.dispose'
      - '@ms/sp-canvas.Async.requestAnimationFrame'
      - '@ms/sp-canvas.Async.setImmediate'
      - '@ms/sp-canvas.Async.setInterval'
      - '@ms/sp-canvas.Async.setTimeout'
      - '@ms/sp-canvas.Async.throttle'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@ms/sp-canvas'
  - uid: '@ms/sp-canvas.Async.constructor'
    name: Async
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new Async(parent?: any, onError?: (e: Error) => void)'
      parameters:
        - id: parent
          type:
            - any
          description: ''
          optional: true
        - id: onError
          type:
            - '(e: Error) => void'
          description: ''
          optional: true
  - uid: '@ms/sp-canvas.Async.cancelAnimationFrame'
    name: cancelAnimationFrame
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function cancelAnimationFrame(id: number)'
      parameters:
        - id: id
          type:
            - number
          description: ''
  - uid: '@ms/sp-canvas.Async.clearImmediate'
    name: clearImmediate
    children: []
    type: method
    langs:
      - typeScript
    summary: Clears the immediate.
    syntax:
      content: 'function clearImmediate(id: number)'
      parameters:
        - id: id
          type:
            - number
          description: |
            Id to cancel.
  - uid: '@ms/sp-canvas.Async.clearInterval'
    name: clearInterval
    children: []
    type: method
    langs:
      - typeScript
    summary: Clears the interval.
    syntax:
      content: 'function clearInterval(id: number)'
      parameters:
        - id: id
          type:
            - number
          description: |
            Id to cancel.
  - uid: '@ms/sp-canvas.Async.clearTimeout'
    name: clearTimeout
    children: []
    type: method
    langs:
      - typeScript
    summary: Clears the timeout.
    syntax:
      content: 'function clearTimeout(id: number)'
      parameters:
        - id: id
          type:
            - number
          description: |
            Id to cancel.
  - uid: '@ms/sp-canvas.Async.debounce'
    name: debounce
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a function that will delay the execution of func until after wait
      milliseconds have

      elapsed since the last time it was invoked. Provide an options object to
      indicate that func

      should be invoked on the leading and/or trailing edge of the wait timeout.
      Subsequent calls

      to the debounced function will return the result of the last func call.

      Note: If leading and trailing options are true func will be called on the
      trailing edge of

      the timeout only if the the debounced function is invoked more than once
      during the wait

      timeout.
    syntax:
      content: 'function debounce<T>(func: T, wait?: number, options: function)'
      parameters:
        - id: func
          type:
            - T
          description: The function to debounce.
        - id: wait
          type:
            - number
          description: The number of milliseconds to delay.
          optional: true
        - id: options
          type:
            - function
          description: The options object.
      return:
        type:
          - T
  - uid: '@ms/sp-canvas.Async.dispose'
    name: dispose
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Dispose function, clears all async operations.'
    syntax:
      content: function dispose()
      parameters: []
  - uid: '@ms/sp-canvas.Async.requestAnimationFrame'
    name: requestAnimationFrame
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function requestAnimationFrame(callback: () => void)'
      parameters:
        - id: callback
          type:
            - () => void
          description: ''
      return:
        type:
          - number
  - uid: '@ms/sp-canvas.Async.setImmediate'
    name: setImmediate
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      SetImmediate override, which will auto cancel the immediate during
      dispose.
    syntax:
      content: 'function setImmediate(callback: () => void)'
      parameters:
        - id: callback
          type:
            - () => void
          description: Callback to execute.
      return:
        type:
          - number
  - uid: '@ms/sp-canvas.Async.setInterval'
    name: setInterval
    children: []
    type: method
    langs:
      - typeScript
    summary: 'SetInterval override, which will auto cancel the timeout during dispose.'
    syntax:
      content: 'function setInterval(callback: () => void, duration: number)'
      parameters:
        - id: callback
          type:
            - () => void
          description: Callback to execute.
        - id: duration
          type:
            - number
          description: Duration in milliseconds.
      return:
        type:
          - number
  - uid: '@ms/sp-canvas.Async.setTimeout'
    name: setTimeout
    children: []
    type: method
    langs:
      - typeScript
    summary: 'SetTimeout override, which will auto cancel the timeout during dispose.'
    syntax:
      content: 'function setTimeout(callback: () => void, duration: number)'
      parameters:
        - id: callback
          type:
            - () => void
          description: Callback to execute.
        - id: duration
          type:
            - number
          description: Duration in milliseconds.
      return:
        type:
          - number
  - uid: '@ms/sp-canvas.Async.throttle'
    name: throttle
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a function that, when executed, will only call the func function
      at most once per

      every wait milliseconds. Provide an options object to indicate that func
      should be invoked

      on the leading and/or trailing edge of the wait timeout. Subsequent calls
      to the throttled

      function will return the result of the last func call.

      Note: If leading and trailing options are true func will be called on the
      trailing edge of

      the timeout only if the the throttled function is invoked more than once
      during the wait timeout.
    syntax:
      content: 'function throttle<T>(func: T, wait?: number, options: function)'
      parameters:
        - id: func
          type:
            - T
          description: The function to throttle.
        - id: wait
          type:
            - number
          description: The number of milliseconds to throttle executions to. Defaults to 0.
          optional: true
        - id: options
          type:
            - function
          description: The options object.
      return:
        type:
          - T
