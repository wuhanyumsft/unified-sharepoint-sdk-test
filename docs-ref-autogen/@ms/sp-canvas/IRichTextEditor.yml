### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-canvas.IRichTextEditor'
    name: IRichTextEditor
    fullName: IRichTextEditor
    children:
      - '@ms/sp-canvas.IRichTextEditor.appliedFontColor'
      - '@ms/sp-canvas.IRichTextEditor.appliedFontSize'
      - '@ms/sp-canvas.IRichTextEditor.appliedHighlightColor'
      - '@ms/sp-canvas.IRichTextEditor.clearFormatting'
      - '@ms/sp-canvas.IRichTextEditor.destroy'
      - '@ms/sp-canvas.IRichTextEditor.focus'
      - '@ms/sp-canvas.IRichTextEditor.format'
      - '@ms/sp-canvas.IRichTextEditor.formatTable'
      - '@ms/sp-canvas.IRichTextEditor.getBounds'
      - '@ms/sp-canvas.IRichTextEditor.getEditorType'
      - '@ms/sp-canvas.IRichTextEditor.getFormatValue'
      - '@ms/sp-canvas.IRichTextEditor.getHTML'
      - '@ms/sp-canvas.IRichTextEditor.getSelectedLink'
      - '@ms/sp-canvas.IRichTextEditor.getSelectedLinkAttribute'
      - '@ms/sp-canvas.IRichTextEditor.getSelection'
      - '@ms/sp-canvas.IRichTextEditor.getText'
      - '@ms/sp-canvas.IRichTextEditor.isFormatAppliedToRange'
      - '@ms/sp-canvas.IRichTextEditor.isTableSelected'
      - '@ms/sp-canvas.IRichTextEditor.noColor'
      - '@ms/sp-canvas.IRichTextEditor.setSelection'
    langs:
      - typeScript
    type: interface
    summary: >-
      The interface for SPRte interaction with editor

      SPRte only depend on this interface and should not directly depend on CK
      API

      In case of a CK upgrade, we can create a new implementation of this
      interface to use in SPRte
    package: '@ms/sp-canvas'
  - uid: '@ms/sp-canvas.IRichTextEditor.appliedFontColor'
    name: appliedFontColor
    fullName: appliedFontColor
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the currently applied font color on selection
    syntax:
      content: string appliedFontColor
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.appliedFontSize'
    name: appliedFontSize
    fullName: appliedFontSize
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the currently applied font size on selection
    syntax:
      content: string appliedFontSize
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.appliedHighlightColor'
    name: appliedHighlightColor
    fullName: appliedHighlightColor
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the currently applied highlight color on selection
    syntax:
      content: string appliedHighlightColor
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.clearFormatting'
    name: clearFormatting
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function clearFormatting(start: number, end: number)'
      parameters:
        - id: start
          type:
            - number
          description: Start position of selection
        - id: end
          type:
            - number
          description: |
            End position of selection

            Clear formattings in a given selection
  - uid: '@ms/sp-canvas.IRichTextEditor.destroy'
    name: destroy
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function destroy()
      parameters: []
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.focus'
    name: focus
    children: []
    type: method
    langs:
      - typeScript
    summary: Set the focus inside the editor
    syntax:
      content: function focus()
      parameters: []
  - uid: '@ms/sp-canvas.IRichTextEditor.format'
    name: format
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function format(start: number, end: number, formats: Object,
        applyAllFormatsToLine?: boolean)
      parameters:
        - id: start
          type:
            - number
          description: Start position of selection
        - id: end
          type:
            - number
          description: End position of selection
        - id: formats
          type:
            - Object
          description: 'Map of key:value pairs for formats to apply'
        - id: applyAllFormatsToLine
          type:
            - boolean
          description: >
            Forces all formats to be applied to the whole line(s). If not
            provided,

            formats are divided into two buckets (line vs non-line) based on
            their isLine field


            A unified method for applying editor formats to any selection
          optional: true
  - uid: '@ms/sp-canvas.IRichTextEditor.formatTable'
    name: formatTable
    children: []
    type: method
    langs:
      - typeScript
    summary: Applies the format to the table in the RTE
    syntax:
      content: 'function formatTable(format: string, target: Element)'
      parameters:
        - id: format
          type:
            - string
          description: ''
        - id: target
          type:
            - Element
          description: ''
  - uid: '@ms/sp-canvas.IRichTextEditor.getBounds'
    name: getBounds
    children: []
    type: method
    langs:
      - typeScript
    summary: Get rendered position of the cursor for a given cursor position
    syntax:
      content: 'function getBounds(position: number)'
      parameters:
        - id: position
          type:
            - number
          description: ''
      return:
        type:
          - '@@ms/sp-canvas.IBounds'
  - uid: '@ms/sp-canvas.IRichTextEditor.getEditorType'
    name: getEditorType
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the type of editor
    syntax:
      content: function getEditorType()
      parameters: []
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.getFormatValue'
    name: getFormatValue
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getFormatValue(start: number, end: number, format:
        IRichTextFormat)
      parameters:
        - id: start
          type:
            - number
          description: Start value of range
        - id: end
          type:
            - number
          description: |
            End value of range
        - id: format
          type:
            - '@@ms/sp-canvas.IRichTextFormat'
          description: Format to apply
  - uid: '@ms/sp-canvas.IRichTextEditor.getHTML'
    name: getHTML
    children: []
    type: method
    langs:
      - typeScript
    summary: Get editor's HTML content
    syntax:
      content: function getHTML()
      parameters: []
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.getSelectedLink'
    name: getSelectedLink
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the currently selected href in the editor
    syntax:
      content: function getSelectedLink()
      parameters: []
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.getSelectedLinkAttribute'
    name: getSelectedLinkAttribute
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the attribute of currently selected link in the editor
    syntax:
      content: 'function getSelectedLinkAttribute(attribute: string)'
      parameters:
        - id: attribute
          type:
            - string
          description: ''
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.getSelection'
    name: getSelection
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the current selection in the editor
    syntax:
      content: function getSelection()
      parameters: []
      return:
        type:
          - '@@ms/sp-canvas.IRange'
  - uid: '@ms/sp-canvas.IRichTextEditor.getText'
    name: getText
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getText(range?: IRange)'
      parameters:
        - id: range
          type:
            - '@@ms/sp-canvas.IRange'
          description: ''
          optional: true
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.isFormatAppliedToRange'
    name: isFormatAppliedToRange
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function isFormatAppliedToRange(start: number, end: number, format:
        IRichTextFormat)
      parameters:
        - id: start
          type:
            - number
          description: Start value of range
        - id: end
          type:
            - number
          description: |
            End value of range
        - id: format
          type:
            - '@@ms/sp-canvas.IRichTextFormat'
          description: Format to apply
      return:
        type:
          - boolean
  - uid: '@ms/sp-canvas.IRichTextEditor.isTableSelected'
    name: isTableSelected
    fullName: isTableSelected
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns if the table or element inside it is selected
    syntax:
      content: boolean isTableSelected
      return:
        type:
          - boolean
  - uid: '@ms/sp-canvas.IRichTextEditor.noColor'
    name: noColor
    fullName: noColor
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns the value if nocolor is applied
    syntax:
      content: string noColor
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.IRichTextEditor.setSelection'
    name: setSelection
    children: []
    type: method
    langs:
      - typeScript
    summary: Set the current selection in the editor
    syntax:
      content: 'function setSelection(range: IRange)'
      parameters:
        - id: range
          type:
            - '@@ms/sp-canvas.IRange'
          description: ''
