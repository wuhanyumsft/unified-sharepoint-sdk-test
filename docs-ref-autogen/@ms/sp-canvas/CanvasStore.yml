### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-canvas.CanvasStore'
    name: CanvasStore
    fullName: CanvasStore
    children:
      - '@ms/sp-canvas.CanvasStore.a11yManager'
      - '@ms/sp-canvas.CanvasStore.addControlToCanvas'
      - '@ms/sp-canvas.CanvasStore.addReference'
      - '@ms/sp-canvas.CanvasStore.canvasElement'
      - '@ms/sp-canvas.CanvasStore.canvasLayout'
      - '@ms/sp-canvas.CanvasStore.constructor'
      - '@ms/sp-canvas.CanvasStore.closeToolbox'
      - '@ms/sp-canvas.CanvasStore.confirmationDialogProps'
      - '@ms/sp-canvas.CanvasStore.controlsProps'
      - '@ms/sp-canvas.CanvasStore.createQosScope'
      - '@ms/sp-canvas.CanvasStore.deleteControl'
      - '@ms/sp-canvas.CanvasStore.deletedControlLayout'
      - '@ms/sp-canvas.CanvasStore.deserialize'
      - '@ms/sp-canvas.CanvasStore.displayMode'
      - '@ms/sp-canvas.CanvasStore.dispose'
      - '@ms/sp-canvas.CanvasStore.fetchWebparts'
      - '@ms/sp-canvas.CanvasStore.fillToolboxItems'
      - '@ms/sp-canvas.CanvasStore.getControl'
      - '@ms/sp-canvas.CanvasStore.getToolBoxItem'
      - '@ms/sp-canvas.CanvasStore.handleConfigureButtonClicked'
      - '@ms/sp-canvas.CanvasStore.handleConfigureZoneButtonClicked'
      - '@ms/sp-canvas.CanvasStore.handleDeleteControlButtonClicked'
      - '@ms/sp-canvas.CanvasStore.handleDeleteControlDialogConfirmation'
      - '@ms/sp-canvas.CanvasStore.handleDeleteControlDialogDismiss'
      - '@ms/sp-canvas.CanvasStore.handleDeleteZoneButtonClicked'
      - '@ms/sp-canvas.CanvasStore.handleDeleteZoneDialogConfirmation'
      - '@ms/sp-canvas.CanvasStore.handleDeleteZoneDialogDismiss'
      - '@ms/sp-canvas.CanvasStore.handleToolboxItemClick'
      - '@ms/sp-canvas.CanvasStore.handleWindowBlur'
      - '@ms/sp-canvas.CanvasStore.hoveredControlId'
      - '@ms/sp-canvas.CanvasStore.isFullWidth'
      - '@ms/sp-canvas.CanvasStore.isNarrowMode'
      - '@ms/sp-canvas.CanvasStore.isPolarisMultiColumnEditEnabled'
      - '@ms/sp-canvas.CanvasStore.isReorderingSupported'
      - '@ms/sp-canvas.CanvasStore.isRTESettingsFlightEnabled'
      - '@ms/sp-canvas.CanvasStore.notifyChanged'
      - '@ms/sp-canvas.CanvasStore.onViewportWebPartsRendered'
      - '@ms/sp-canvas.CanvasStore.openToolbox'
      - '@ms/sp-canvas.CanvasStore.reclaimFocus'
      - '@ms/sp-canvas.CanvasStore.scrollableParent'
      - '@ms/sp-canvas.CanvasStore.scrollIntoView'
      - '@ms/sp-canvas.CanvasStore.scrollThreshold'
      - '@ms/sp-canvas.CanvasStore.selectedControlId'
      - '@ms/sp-canvas.CanvasStore.selectedZoneIndex'
      - '@ms/sp-canvas.CanvasStore.serialize'
      - '@ms/sp-canvas.CanvasStore.serviceScope'
      - '@ms/sp-canvas.CanvasStore.shouldCenterAlign'
      - '@ms/sp-canvas.CanvasStore.siteSupportsFullWidth'
      - '@ms/sp-canvas.CanvasStore.toolbox'
      - '@ms/sp-canvas.CanvasStore.toolboxProps'
      - '@ms/sp-canvas.CanvasStore.tryGeneratePreviewImageUrl'
      - '@ms/sp-canvas.CanvasStore.webPartManager'
      - '@ms/sp-canvas.CanvasStore.webPartsCount'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@ms/sp-canvas'
  - uid: '@ms/sp-canvas.CanvasStore.a11yManager'
    name: a11yManager
    fullName: a11yManager
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: A11yManager a11yManager
      return:
        type:
          - A11yManager
  - uid: '@ms/sp-canvas.CanvasStore.addControlToCanvas'
    name: addControlToCanvas
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addControlToCanvas(control: ICanvasControl, shouldRender?:
        boolean)
      parameters:
        - id: control
          type:
            - '@@ms/sp-canvas.ICanvasControl'
          description: ''
        - id: shouldRender
          type:
            - boolean
          description: ''
          optional: true
  - uid: '@ms/sp-canvas.CanvasStore.addReference'
    name: addReference
    fullName: addReference
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: '(ref: CanvasControlComponent) => void addReference'
      return:
        type:
          - '(ref: CanvasControlComponent) => void'
  - uid: '@ms/sp-canvas.CanvasStore.canvasElement'
    name: canvasElement
    fullName: canvasElement
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: HTMLElement canvasElement
      return:
        type:
          - HTMLElement
  - uid: '@ms/sp-canvas.CanvasStore.canvasLayout'
    name: canvasLayout
    fullName: canvasLayout
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: CanvasLayout canvasLayout
      return:
        type:
          - '@@ms/sp-canvas.CanvasLayout'
  - uid: '@ms/sp-canvas.CanvasStore.constructor'
    name: CanvasStore
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new CanvasStore(serviceScope: ServiceScope, render: () => void,
        a11yManager: A11yManager, mode: DisplayMode, serializedCanvas?: string,
        handleCanvasChanged?: () => void, scrollThreshold?: number,
        onViewportRendered?: (endTime: number) => void, shouldCenterAlign?:
        boolean)
      parameters:
        - id: serviceScope
          type:
            - ServiceScope
          description: ''
        - id: render
          type:
            - () => void
          description: ''
        - id: a11yManager
          type:
            - A11yManager
          description: ''
        - id: mode
          type:
            - DisplayMode
          description: ''
        - id: serializedCanvas
          type:
            - string
          description: ''
          optional: true
        - id: handleCanvasChanged
          type:
            - () => void
          description: ''
          optional: true
        - id: scrollThreshold
          type:
            - number
          description: ''
          optional: true
        - id: onViewportRendered
          type:
            - '(endTime: number) => void'
          description: ''
          optional: true
        - id: shouldCenterAlign
          type:
            - boolean
          description: ''
          optional: true
  - uid: '@ms/sp-canvas.CanvasStore.closeToolbox'
    name: closeToolbox
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function closeToolbox(ev?: MouseEvent)'
      parameters:
        - id: ev
          type:
            - MouseEvent
          description: ''
          optional: true
  - uid: '@ms/sp-canvas.CanvasStore.confirmationDialogProps'
    name: confirmationDialogProps
    fullName: confirmationDialogProps
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: IConfirmationDialogProps confirmationDialogProps
      return:
        type:
          - '@@ms/sp-canvas.IConfirmationDialogProps'
  - uid: '@ms/sp-canvas.CanvasStore.controlsProps'
    name: controlsProps
    fullName: controlsProps
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ICanvasControl[] controlsProps'
      return:
        type:
          - '@@ms/sp-canvas.ICanvasControl[]'
  - uid: '@ms/sp-canvas.CanvasStore.createQosScope'
    name: createQosScope
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createQosScope(scope: string)'
      parameters:
        - id: scope
          type:
            - string
          description: ''
      return:
        type:
          - _QosMonitor
  - uid: '@ms/sp-canvas.CanvasStore.deleteControl'
    name: deleteControl
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteControl(layout: IControlPosition)'
      parameters:
        - id: layout
          type:
            - '@@ms/sp-canvas.IControlPosition'
          description: ''
  - uid: '@ms/sp-canvas.CanvasStore.deletedControlLayout'
    name: deletedControlLayout
    fullName: deletedControlLayout
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: IControlPosition deletedControlLayout
      return:
        type:
          - '@@ms/sp-canvas.IControlPosition'
  - uid: '@ms/sp-canvas.CanvasStore.deserialize'
    name: deserialize
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deserialize(displayMode: DisplayMode, serializedCanvas: string)'
      parameters:
        - id: displayMode
          type:
            - DisplayMode
          description: ''
        - id: serializedCanvas
          type:
            - string
          description: ''
  - uid: '@ms/sp-canvas.CanvasStore.displayMode'
    name: displayMode
    fullName: displayMode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: DisplayMode displayMode
      return:
        type:
          - DisplayMode
  - uid: '@ms/sp-canvas.CanvasStore.dispose'
    name: dispose
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function dispose()
      parameters: []
  - uid: '@ms/sp-canvas.CanvasStore.fetchWebparts'
    name: fetchWebparts
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If the Canvas is in DisplayMode.Edit, asynchronously fetch web part
      manifests in the background. If the Canvas is
       not in DisplayMode.Edit, fetch can be forced.
    syntax:
      content: 'function fetchWebparts(force?: boolean)'
      parameters:
        - id: force
          type:
            - boolean
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
  - uid: '@ms/sp-canvas.CanvasStore.fillToolboxItems'
    name: fillToolboxItems
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function fillToolboxItems(isFullWidth?: boolean, newToolboxProps?:
        IToolboxSmallProps)
      parameters:
        - id: isFullWidth
          type:
            - boolean
          description: ''
          optional: true
        - id: newToolboxProps
          type:
            - '@@ms/sp-canvas.IToolboxSmallProps'
          description: ''
          optional: true
  - uid: '@ms/sp-canvas.CanvasStore.getControl'
    name: getControl
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getControl(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - CanvasControlComponent
  - uid: '@ms/sp-canvas.CanvasStore.getToolBoxItem'
    name: getToolBoxItem
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getToolBoxItem(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - '@@ms/sp-canvas.IWebPartZoneProps'
  - uid: '@ms/sp-canvas.CanvasStore.handleConfigureButtonClicked'
    name: handleConfigureButtonClicked
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function handleConfigureButtonClicked(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
  - uid: '@ms/sp-canvas.CanvasStore.handleConfigureZoneButtonClicked'
    name: handleConfigureZoneButtonClicked
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function handleConfigureZoneButtonClicked(id: string, zoneFocusHandler:
        () => void)
      parameters:
        - id: id
          type:
            - string
          description: ''
        - id: zoneFocusHandler
          type:
            - () => void
          description: ''
  - uid: '@ms/sp-canvas.CanvasStore.handleDeleteControlButtonClicked'
    name: handleDeleteControlButtonClicked
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function handleDeleteControlButtonClicked(layout: IControlPosition)'
      parameters:
        - id: layout
          type:
            - '@@ms/sp-canvas.IControlPosition'
          description: ''
  - uid: '@ms/sp-canvas.CanvasStore.handleDeleteControlDialogConfirmation'
    name: handleDeleteControlDialogConfirmation
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function handleDeleteControlDialogConfirmation()
      parameters: []
  - uid: '@ms/sp-canvas.CanvasStore.handleDeleteControlDialogDismiss'
    name: handleDeleteControlDialogDismiss
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function handleDeleteControlDialogDismiss()
      parameters: []
  - uid: '@ms/sp-canvas.CanvasStore.handleDeleteZoneButtonClicked'
    name: handleDeleteZoneButtonClicked
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function handleDeleteZoneButtonClicked(layout: IControlPosition)'
      parameters:
        - id: layout
          type:
            - '@@ms/sp-canvas.IControlPosition'
          description: ''
  - uid: '@ms/sp-canvas.CanvasStore.handleDeleteZoneDialogConfirmation'
    name: handleDeleteZoneDialogConfirmation
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function handleDeleteZoneDialogConfirmation()
      parameters: []
  - uid: '@ms/sp-canvas.CanvasStore.handleDeleteZoneDialogDismiss'
    name: handleDeleteZoneDialogDismiss
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function handleDeleteZoneDialogDismiss()
      parameters: []
  - uid: '@ms/sp-canvas.CanvasStore.handleToolboxItemClick'
    name: handleToolboxItemClick
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function handleToolboxItemClick(itemProps: ICanvasControl)'
      parameters:
        - id: itemProps
          type:
            - '@@ms/sp-canvas.ICanvasControl'
          description: ''
  - uid: '@ms/sp-canvas.CanvasStore.handleWindowBlur'
    name: handleWindowBlur
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      IFrame's swallow pointer events, so this is a workaround to detect when
      focus has shifted to

      an IFrame. Additionally, to compensate for IFrame to IFrame interactions
      we poll for the document.activeElement.

      If document.activeElement is not the same as it was in the last poll then
      the focus has shifted from the IFrame.

      If the new document.activeElement is an IFrame continue polling, otherwise
      we can stop polling because focus

      is back inside of the current document.
    syntax:
      content: 'function handleWindowBlur(e: MouseEvent)'
      parameters:
        - id: e
          type:
            - MouseEvent
          description: ''
  - uid: '@ms/sp-canvas.CanvasStore.hoveredControlId'
    name: hoveredControlId
    fullName: hoveredControlId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The hoveredControlId keeps track of which control the pointer is currently
      over.

      It is used as a workaround to track pointer events on web parts that have
      IFrames.
    syntax:
      content: string hoveredControlId
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.CanvasStore.isFullWidth'
    name: isFullWidth
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function isFullWidth(position: IControlPosition)'
      parameters:
        - id: position
          type:
            - '@@ms/sp-canvas.IControlPosition'
          description: ''
      return:
        type:
          - boolean
  - uid: '@ms/sp-canvas.CanvasStore.isNarrowMode'
    name: isNarrowMode
    fullName: isNarrowMode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean isNarrowMode
      return:
        type:
          - boolean
  - uid: '@ms/sp-canvas.CanvasStore.isPolarisMultiColumnEditEnabled'
    name: isPolarisMultiColumnEditEnabled
    fullName: isPolarisMultiColumnEditEnabled
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static boolean isPolarisMultiColumnEditEnabled
      return:
        type:
          - boolean
  - uid: '@ms/sp-canvas.CanvasStore.isReorderingSupported'
    name: isReorderingSupported
    fullName: isReorderingSupported
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static boolean isReorderingSupported
      return:
        type:
          - boolean
  - uid: '@ms/sp-canvas.CanvasStore.isRTESettingsFlightEnabled'
    name: isRTESettingsFlightEnabled
    fullName: isRTESettingsFlightEnabled
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static boolean isRTESettingsFlightEnabled
      return:
        type:
          - boolean
  - uid: '@ms/sp-canvas.CanvasStore.notifyChanged'
    name: notifyChanged
    fullName: notifyChanged
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: () => void notifyChanged
      return:
        type:
          - () => void
  - uid: '@ms/sp-canvas.CanvasStore.onViewportWebPartsRendered'
    name: onViewportWebPartsRendered
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onViewportWebPartsRendered(endTime: number)'
      parameters:
        - id: endTime
          type:
            - number
          description: ''
  - uid: '@ms/sp-canvas.CanvasStore.openToolbox'
    name: openToolbox
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function openToolbox(position: IControlPosition, verticalPosition:
        number, horizontalPosition?: number, onClose?: () => void)
      parameters:
        - id: position
          type:
            - '@@ms/sp-canvas.IControlPosition'
          description: ''
        - id: verticalPosition
          type:
            - number
          description: ''
        - id: horizontalPosition
          type:
            - number
          description: ''
          optional: true
        - id: onClose
          type:
            - () => void
          description: ''
          optional: true
  - uid: '@ms/sp-canvas.CanvasStore.reclaimFocus'
    name: reclaimFocus
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function reclaimFocus()
      parameters: []
  - uid: '@ms/sp-canvas.CanvasStore.scrollableParent'
    name: scrollableParent
    fullName: scrollableParent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: HTMLElement scrollableParent
      return:
        type:
          - HTMLElement
  - uid: '@ms/sp-canvas.CanvasStore.scrollIntoView'
    name: scrollIntoView
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If needed, scrolls element into view after the element is added to the
      Canvas.

      Note: Javascript scrollIntoView is not consistent cross-browser
    syntax:
      content: >-
        function scrollIntoView(type: function, element: HTMLElement, duration:
        number, margin: number, allowScrollUp?: boolean)
      parameters:
        - id: type
          type:
            - function
          description: >-
            Specifies whether to scroll if the 'full' web part is visible or a
            'partial' part of the web part
              is visible
        - id: element
          type:
            - HTMLElement
          description: A rendered element inside the Canvas to scroll to
        - id: duration
          type:
            - number
          description: >-
            The length of time the animation should take. Frames are calculated
            by duration / delta time.
        - id: margin
          type:
            - number
          description: >
            Optional. Margin to be scrolled into view. If not provided, margin
            is not scrolled into view
        - id: allowScrollUp
          type:
            - boolean
          description: ''
          optional: true
  - uid: '@ms/sp-canvas.CanvasStore.scrollThreshold'
    name: scrollThreshold
    fullName: scrollThreshold
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: number scrollThreshold
      return:
        type:
          - number
  - uid: '@ms/sp-canvas.CanvasStore.selectedControlId'
    name: selectedControlId
    fullName: selectedControlId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string selectedControlId
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.CanvasStore.selectedZoneIndex'
    name: selectedZoneIndex
    fullName: selectedZoneIndex
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: number selectedZoneIndex
      return:
        type:
          - number
  - uid: '@ms/sp-canvas.CanvasStore.serialize'
    name: serialize
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Serialize the current contents of the Canvas. The serialized string is in
      a HTML/JSON format understood by

      SharePoint's Rich Text Field. The returned string can be crawled by
      search. Modifying the returned

      string outside of the Canvas is not supported.
    syntax:
      content: 'function serialize(toJson?: boolean)'
      parameters:
        - id: toJson
          type:
            - boolean
          description: >
            Indicates whether the returned serialized string is a JSON string or
            not.
          optional: true
      return:
        type:
          - string
  - uid: '@ms/sp-canvas.CanvasStore.serviceScope'
    name: serviceScope
    fullName: serviceScope
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ServiceScope serviceScope
      return:
        type:
          - ServiceScope
  - uid: '@ms/sp-canvas.CanvasStore.shouldCenterAlign'
    name: shouldCenterAlign
    fullName: shouldCenterAlign
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean shouldCenterAlign
      return:
        type:
          - boolean
  - uid: '@ms/sp-canvas.CanvasStore.siteSupportsFullWidth'
    name: siteSupportsFullWidth
    fullName: siteSupportsFullWidth
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean siteSupportsFullWidth
      return:
        type:
          - boolean
  - uid: '@ms/sp-canvas.CanvasStore.toolbox'
    name: toolbox
    fullName: toolbox
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: void toolbox
      return:
        type:
          - void
  - uid: '@ms/sp-canvas.CanvasStore.toolboxProps'
    name: toolboxProps
    fullName: toolboxProps
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: IToolboxSmallProps toolboxProps
      return:
        type:
          - '@@ms/sp-canvas.IToolboxSmallProps'
  - uid: '@ms/sp-canvas.CanvasStore.tryGeneratePreviewImageUrl'
    name: tryGeneratePreviewImageUrl
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function tryGeneratePreviewImageUrl()
      parameters: []
  - uid: '@ms/sp-canvas.CanvasStore.webPartManager'
    name: webPartManager
    fullName: webPartManager
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: ClientSideWebPartManager webPartManager
      return:
        type:
          - ClientSideWebPartManager
  - uid: '@ms/sp-canvas.CanvasStore.webPartsCount'
    name: webPartsCount
    fullName: webPartsCount
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: number webPartsCount
      return:
        type:
          - number
