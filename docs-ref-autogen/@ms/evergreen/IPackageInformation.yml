### YamlMime:UniversalReference
items:
  - uid: '@ms/evergreen.IPackageInformation'
    name: IPackageInformation
    fullName: IPackageInformation
    children:
      - '@ms/evergreen.IPackageInformation.autoMerge'
      - '@ms/evergreen.IPackageInformation.lockedVersion'
      - '@ms/evergreen.IPackageInformation.name'
    langs:
      - typeScript
    type: interface
    summary: Information about a particular package
    package: '@ms/evergreen'
  - uid: '@ms/evergreen.IPackageInformation.autoMerge'
    name: autoMerge
    fullName: autoMerge
    children: []
    langs:
      - typeScript
    type: property
    summary: Determines whether or not we should automatically merge the package
    syntax:
      content: boolean autoMerge
      return:
        type:
          - boolean
  - uid: '@ms/evergreen.IPackageInformation.lockedVersion'
    name: lockedVersion
    fullName: lockedVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Requires the Evergreen algorithm to use a specific version, instead of the

      latest compatible version. This is useful for certain specific cases, such

      as to hold off on Evergreen right before releasing a product, or in cases

      where we know that the new version of the Evergreen dependency will be
      highly

      disruptive. It is not recommended to rely on this feature for long periods
      of

      time as:
        1) It will also hold back propagation of any libraries that are directly or
           indirectly coupled. (For example, if sp-client locks OUIFR then most of
           odsp-common will implicitly be locked as well, which is effectively very
           close to disabling Evergreen entirely).
        2) The lockedVersion setting should be applied to the most upstream consumer,
           not the leaf consumer. (For example, it would be much better to avoid
           publishing OUIFR at all, or specify the lockedVersion for its immediate
           consumers, versus locking it in sp-client which is the end repo in this chain.)
    syntax:
      content: string lockedVersion
      return:
        type:
          - string
  - uid: '@ms/evergreen.IPackageInformation.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the package
    syntax:
      content: string name
      return:
        type:
          - string
