### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-publishing-webparts.EventsStore'
    name: EventsStore
    fullName: EventsStore
    children:
      - '@ms/sp-publishing-webparts.EventsStore.constructor'
      - '@ms/sp-publishing-webparts.EventsStore.getEventsWithCurrentSettings'
      - '@ms/sp-publishing-webparts.EventsStore.getEventWithAttachments'
      - '@ms/sp-publishing-webparts.EventsStore.getPageEvents'
      - '@ms/sp-publishing-webparts.EventsStore.getSeriesMasterEvent'
      - '@ms/sp-publishing-webparts.EventsStore.hasMoreEvents'
      - '@ms/sp-publishing-webparts.EventsStore.hasPrevEvents'
      - '@ms/sp-publishing-webparts.EventsStore.periodType'
      - '@ms/sp-publishing-webparts.EventsStore.selectedGroup'
      - '@ms/sp-publishing-webparts.EventsStore.showPerPage'
      - '@ms/sp-publishing-webparts.EventsStore.switchPeriod'
      - '@ms/sp-publishing-webparts.EventsStore.switchToFirstPage'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@ms/sp-publishing-webparts'
  - uid: '@ms/sp-publishing-webparts.EventsStore.constructor'
    name: EventsStore
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new EventsStore(settings: IEventStoreSettings)'
      parameters:
        - id: settings
          type:
            - '@@ms/sp-publishing-webparts.IEventStoreSettings'
          description: ''
  - uid: '@ms/sp-publishing-webparts.EventsStore.getEventsWithCurrentSettings'
    name: getEventsWithCurrentSettings
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getEventsWithCurrentSettings()
      parameters: []
      return:
        type:
          - 'Promise<@@ms/sp-publishing-webparts.IExchangeCalendarEvent[]>'
  - uid: '@ms/sp-publishing-webparts.EventsStore.getEventWithAttachments'
    name: getEventWithAttachments
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getEventWithAttachments(eventId: string)'
      parameters:
        - id: eventId
          type:
            - string
          description: ''
      return:
        type:
          - Promise<@@ms/sp-publishing-webparts.IExchangeCalendarEvent>
  - uid: '@ms/sp-publishing-webparts.EventsStore.getPageEvents'
    name: getPageEvents
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPageEvents(pageType: PageType)'
      parameters:
        - id: pageType
          type:
            - PageType
          description: ''
      return:
        type:
          - 'Promise<@@ms/sp-publishing-webparts.IExchangeCalendarEvent[]>'
  - uid: '@ms/sp-publishing-webparts.EventsStore.getSeriesMasterEvent'
    name: getSeriesMasterEvent
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getSeriesMasterEvent(eventId: string)'
      parameters:
        - id: eventId
          type:
            - string
          description: ''
      return:
        type:
          - Promise<@@ms/sp-publishing-webparts.IExchangeCalendarEvent>
  - uid: '@ms/sp-publishing-webparts.EventsStore.hasMoreEvents'
    name: hasMoreEvents
    fullName: hasMoreEvents
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean hasMoreEvents
      return:
        type:
          - boolean
  - uid: '@ms/sp-publishing-webparts.EventsStore.hasPrevEvents'
    name: hasPrevEvents
    fullName: hasPrevEvents
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean hasPrevEvents
      return:
        type:
          - boolean
  - uid: '@ms/sp-publishing-webparts.EventsStore.periodType'
    name: periodType
    fullName: periodType
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: PeriodType periodType
      return:
        type:
          - PeriodType
  - uid: '@ms/sp-publishing-webparts.EventsStore.selectedGroup'
    name: selectedGroup
    fullName: selectedGroup
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: IExchangeGroup selectedGroup
      return:
        type:
          - '@@ms/sp-publishing-webparts.IExchangeGroup'
  - uid: '@ms/sp-publishing-webparts.EventsStore.showPerPage'
    name: showPerPage
    fullName: showPerPage
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Get the number of events to show per page.
      Set the number of events to show per page.
    syntax:
      content: number showPerPage
      return:
        type:
          - number
  - uid: '@ms/sp-publishing-webparts.EventsStore.switchPeriod'
    name: switchPeriod
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function switchPeriod(periodType: PeriodType)'
      parameters:
        - id: periodType
          type:
            - PeriodType
          description: ''
      return:
        type:
          - 'Promise<@@ms/sp-publishing-webparts.IExchangeCalendarEvent[]>'
  - uid: '@ms/sp-publishing-webparts.EventsStore.switchToFirstPage'
    name: switchToFirstPage
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function switchToFirstPage()
      parameters: []
      return:
        type:
          - 'Promise<@@ms/sp-publishing-webparts.IExchangeCalendarEvent[]>'
