### YamlMime:UniversalReference
items:
  - uid: '@ms/sp-dragzone.DragZoneTree'
    name: DragZoneTree
    fullName: DragZoneTree
    children:
      - '@ms/sp-dragzone.DragZoneTree.addDisallowedStyles'
      - '@ms/sp-dragzone.DragZoneTree.applyRemoveCssToDataDragDisallowed'
      - '@ms/sp-dragzone.DragZoneTree.currentPosition'
      - '@ms/sp-dragzone.DragZoneTree.depth'
      - '@ms/sp-dragzone.DragZoneTree.constructor'
      - '@ms/sp-dragzone.DragZoneTree.getBottomMostElementFromMousePosition'
      - '@ms/sp-dragzone.DragZoneTree.getDraggedItem'
      - '@ms/sp-dragzone.DragZoneTree.getDraggedItemPosition'
      - '@ms/sp-dragzone.DragZoneTree.getDraggedOverElement'
      - '@ms/sp-dragzone.DragZoneTree.getElementFromPosition'
      - '@ms/sp-dragzone.DragZoneTree.getElementWithDataDisallowedAreaTag'
      - '@ms/sp-dragzone.DragZoneTree.getHandleFromLeafElement'
      - '@ms/sp-dragzone.DragZoneTree.getHoverOverItemPosition'
      - '@ms/sp-dragzone.DragZoneTree.getIndexInPositionMatrix'
      - '@ms/sp-dragzone.DragZoneTree.getLeafElementFromHandle'
      - '@ms/sp-dragzone.DragZoneTree.getLeafElementFromMousePosition'
      - '@ms/sp-dragzone.DragZoneTree.isDragAllowed'
      - '@ms/sp-dragzone.DragZoneTree.isLeafElement'
      - '@ms/sp-dragzone.DragZoneTree.refreshPositionMatrix'
      - '@ms/sp-dragzone.DragZoneTree.startPosition'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@ms/sp-dragzone'
  - uid: '@ms/sp-dragzone.DragZoneTree.addDisallowedStyles'
    name: addDisallowedStyles
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addDisallowedStyles(dataDragDisallowed: string,
        dataDragDisallowedCss: string, draggedItem?: Element)
      parameters:
        - id: dataDragDisallowed
          type:
            - string
          description: ''
        - id: dataDragDisallowedCss
          type:
            - string
          description: ''
        - id: draggedItem
          type:
            - Element
          description: ''
          optional: true
  - uid: '@ms/sp-dragzone.DragZoneTree.applyRemoveCssToDataDragDisallowed'
    name: applyRemoveCssToDataDragDisallowed
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function applyRemoveCssToDataDragDisallowed(dataDragDisallowedTag:
        string, apply: boolean, cssClass: string)
      parameters:
        - id: dataDragDisallowedTag
          type:
            - string
          description: ''
        - id: apply
          type:
            - boolean
          description: ''
        - id: cssClass
          type:
            - string
          description: ''
  - uid: '@ms/sp-dragzone.DragZoneTree.currentPosition'
    name: currentPosition
    fullName: currentPosition
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: IPoint currentPosition
      return:
        type:
          - '@@ms/sp-dragzone.IPoint'
  - uid: '@ms/sp-dragzone.DragZoneTree.depth'
    name: depth
    fullName: depth
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: number depth
      return:
        type:
          - number
  - uid: '@ms/sp-dragzone.DragZoneTree.constructor'
    name: DragZoneTree
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new DragZoneTree(treeLevelTagsBottomUp: string[], host: Element)'
      parameters:
        - id: treeLevelTagsBottomUp
          type:
            - 'string[]'
          description: ''
        - id: host
          type:
            - Element
          description: ''
  - uid: '@ms/sp-dragzone.DragZoneTree.getBottomMostElementFromMousePosition'
    name: getBottomMostElementFromMousePosition
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getBottomMostElementFromMousePosition(draggedItem?: Element,
        dataDragDisallowed?: string)
      parameters:
        - id: draggedItem
          type:
            - Element
          description: ''
          optional: true
        - id: dataDragDisallowed
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Element
  - uid: '@ms/sp-dragzone.DragZoneTree.getDraggedItem'
    name: getDraggedItem
    fullName: getDraggedItem
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: Element getDraggedItem
      return:
        type:
          - Element
  - uid: '@ms/sp-dragzone.DragZoneTree.getDraggedItemPosition'
    name: getDraggedItemPosition
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getDraggedItemPosition()
      parameters: []
  - uid: '@ms/sp-dragzone.DragZoneTree.getDraggedOverElement'
    name: getDraggedOverElement
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getDraggedOverElement()
      parameters: []
      return:
        type:
          - Element
  - uid: '@ms/sp-dragzone.DragZoneTree.getElementFromPosition'
    name: getElementFromPosition
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getElementFromPosition(position: number[], refreshMatrix?:
        boolean)
      parameters:
        - id: position
          type:
            - 'number[]'
          description: ''
        - id: refreshMatrix
          type:
            - boolean
          description: ''
          optional: true
  - uid: '@ms/sp-dragzone.DragZoneTree.getElementWithDataDisallowedAreaTag'
    name: getElementWithDataDisallowedAreaTag
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getElementWithDataDisallowedAreaTag(elem: Element, value:
        string)
      parameters:
        - id: elem
          type:
            - Element
          description: ''
        - id: value
          type:
            - string
          description: ''
      return:
        type:
          - Element
  - uid: '@ms/sp-dragzone.DragZoneTree.getHandleFromLeafElement'
    name: getHandleFromLeafElement
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getHandleFromLeafElement(draggedElement: Element, value:
        string)
      parameters:
        - id: draggedElement
          type:
            - Element
          description: ''
        - id: value
          type:
            - string
          description: ''
      return:
        type:
          - Element
  - uid: '@ms/sp-dragzone.DragZoneTree.getHoverOverItemPosition'
    name: getHoverOverItemPosition
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getHoverOverItemPosition(el?: Element)'
      parameters:
        - id: el
          type:
            - Element
          description: ''
          optional: true
  - uid: '@ms/sp-dragzone.DragZoneTree.getIndexInPositionMatrix'
    name: getIndexInPositionMatrix
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getIndexInPositionMatrix(position: number[])'
      parameters:
        - id: position
          type:
            - 'number[]'
          description: ''
      return:
        type:
          - number
  - uid: '@ms/sp-dragzone.DragZoneTree.getLeafElementFromHandle'
    name: getLeafElementFromHandle
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getLeafElementFromHandle(handle: Element)'
      parameters:
        - id: handle
          type:
            - Element
          description: ''
  - uid: '@ms/sp-dragzone.DragZoneTree.getLeafElementFromMousePosition'
    name: getLeafElementFromMousePosition
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getLeafElementFromMousePosition()
      parameters: []
      return:
        type:
          - Element
  - uid: '@ms/sp-dragzone.DragZoneTree.isDragAllowed'
    name: isDragAllowed
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function isDragAllowed(draggedItem: Element, dragOverElement: Element,
        dataDragDisallowed: string)
      parameters:
        - id: draggedItem
          type:
            - Element
          description: ''
        - id: dragOverElement
          type:
            - Element
          description: ''
        - id: dataDragDisallowed
          type:
            - string
          description: ''
      return:
        type:
          - boolean
  - uid: '@ms/sp-dragzone.DragZoneTree.isLeafElement'
    name: isLeafElement
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isLeafElement(element: Element)'
      parameters:
        - id: element
          type:
            - Element
          description: ''
      return:
        type:
          - boolean
  - uid: '@ms/sp-dragzone.DragZoneTree.refreshPositionMatrix'
    name: refreshPositionMatrix
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Refreshes the array of positions for each branch of the tree. This is an
      array of arrays that are tree depth.

      If one of the branches doesn't go all the way to the leaves, the values in
      the array will be -1 for any missing

      node. So [0,0,0] is the first leaf, [0,1,-1] is what we get if the second
      node has no leaves.
    syntax:
      content: function refreshPositionMatrix()
      parameters: []
  - uid: '@ms/sp-dragzone.DragZoneTree.startPosition'
    name: startPosition
    fullName: startPosition
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: IPoint startPosition
      return:
        type:
          - '@@ms/sp-dragzone.IPoint'
