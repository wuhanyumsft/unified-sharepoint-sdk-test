### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-http.SPHttpClient'
    name: SPHttpClient
    fullName: SPHttpClient
    children:
      - '@microsoft/sp-http.SPHttpClient.beginBatch'
      - '@microsoft/sp-http.SPHttpClient.configurations'
      - '@microsoft/sp-http.SPHttpClient.fetch'
      - '@microsoft/sp-http.SPHttpClient.get'
      - '@microsoft/sp-http.SPHttpClient.getWebUrlFromRequestUrl'
      - '@microsoft/sp-http.SPHttpClient.post'
      - '@microsoft/sp-http.SPHttpClient.serviceKey'
      - '@microsoft/sp-http.SPHttpClient.constructor'
    langs:
      - typeScript
    type: class
    summary: >-
      SPHttpClient is used to perform REST calls against SharePoint.  It adds
      default

      headers, manages the digest needed for writes, and collects telemetry that

      helps the service to monitor the performance of an application.
    source:
      path: spHttpClient/SPHttpClient.ts
      startLine: 40
      remote:
        path: spfx-core/sp-http/src\spHttpClient/SPHttpClient.ts
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-http'
    remarks: >-
      For communicating with Microsoft Graph, use the <xref:GraphHttpClient>
      class instead.

      For communicating with other internet services, use the <xref:HttpClient>
      class.
  - uid: '@microsoft/sp-http.SPHttpClient.beginBatch'
    name: beginBatch
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Begins an ODATA batch, which allows multiple REST queries to be bundled
      into

      a single web request.
    syntax:
      content: >-
        function beginBatch(batchCreationOptions?:
        ISPHttpClientBatchCreationOptions)
      parameters:
        - id: batchCreationOptions
          type:
            - '@@microsoft/sp-http.ISPHttpClientBatchCreationOptions'
          description: ''
          optional: true
      return:
        type:
          - '@@microsoft/sp-http.SPHttpClientBatch'
  - uid: '@microsoft/sp-http.SPHttpClient.configurations'
    name: configurations
    fullName: configurations
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      The standard predefined SPHttpClientConfiguration objects for use with
      the SPHttpClient class.
    syntax:
      content: static ISPHttpClientConfigurations configurations
      return:
        type:
          - '@@microsoft/sp-http.ISPHttpClientConfigurations'
  - uid: '@microsoft/sp-http.SPHttpClient.fetch'
    name: fetch
    children: []
    type: method
    langs:
      - typeScript
    summary: Perform a REST service call.
    syntax:
      content: >-
        function fetch(url: string, configuration: SPHttpClientConfiguration,
        options: ISPHttpClientOptions)
      parameters:
        - id: url
          type:
            - string
          description: the URL to fetch
        - id: configuration
          type:
            - '@@microsoft/sp-http.SPHttpClientConfiguration'
          description: >-
            determines the default behavior of SPHttpClient; normally this
            should
              be the latest version number from SPHttpClientConfigurations
        - id: options
          type:
            - '@@microsoft/sp-http.ISPHttpClientOptions'
          description: additional options that affect the request
      return:
        type:
          - Promise<@@microsoft/sp-http.SPHttpClientResponse>
    remarks: >-
      Generally, the parameters and semantics for SPHttpClient.fetch() are
      essentially

      the same as the WHATWG API standard that is documented here:

      https://fetch.spec.whatwg.org/


      The SPHttpClient subclass adds some additional behaviors that are
      convenient when

      working with SharePoint ODATA API's (which can be avoided by using

      HttpClient instead):


      - Default "Accept" and "Content-Type" headers are added if not explicitly
      specified.


      - For write operations, an "X-RequestDigest" header is automatically added


      - The request digest token is automatically fetched and stored in a cache,
      with
        support for preloading

      For a write operation, SPHttpClient will automatically add the
      "X-RequestDigest"

      header, which may need to be obtained by issuing a seperate request such
      as

      "https://example.com/sites/sample/_api/contextinfo".  Typically the
      appropriate

      SPWeb URL can be guessed by looking for a reserved URL segment such as
      "_api"

      in the original URL passed to fetch(); if not, use
      ISPHttpClientOptions.webUrl

      to specify it explicitly.
  - uid: '@microsoft/sp-http.SPHttpClient.get'
    name: get
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Calls fetch(), but sets the method to "GET".'
    syntax:
      content: >-
        function get(url: string, configuration: SPHttpClientConfiguration,
        options?: ISPHttpClientOptions)
      parameters:
        - id: url
          type:
            - string
          description: the URL to fetch
        - id: configuration
          type:
            - '@@microsoft/sp-http.SPHttpClientConfiguration'
          description: >-
            determines the default behavior of SPHttpClient; normally this
            should
              be the latest version number from SPHttpClientConfigurations
        - id: options
          type:
            - '@@microsoft/sp-http.ISPHttpClientOptions'
          description: additional options that affect the request
          optional: true
      return:
        type:
          - Promise<@@microsoft/sp-http.SPHttpClientResponse>
  - uid: '@microsoft/sp-http.SPHttpClient.getWebUrlFromRequestUrl'
    name: getWebUrlFromRequestUrl
    children: []
    type: method
    langs:
      - typeScript
    summary: Use a heuristic to infer the base URL for authentication.
    syntax:
      content: 'static function getWebUrlFromRequestUrl(requestUrl: string)'
      parameters:
        - id: requestUrl
          type:
            - string
          description: The URL for a SharePoint REST service
      return:
        type:
          - string
    remarks: >-
      Attempts to infer the SPWeb URL associated with the provided REST URL, by
      looking

      for common SharePoint path components such as "_api", "_layouts", or
      "_vit_bin".

      This is necessary for operations such as the X-RequestDigest

      and ODATA batching, which require POSTing to a separate REST endpoint

      in order to complete a request.


      For example, if the requestUrl is "/sites/site/web/_api/service",

      the returned URL would be "/sites/site/web".  Or if the requestUrl

      is "http://example.com/_layouts/service", the returned URL would be

      "http://example.com".


      If the URL cannot be determined, an exception is thrown.
  - uid: '@microsoft/sp-http.SPHttpClient.post'
    name: post
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Calls fetch(), but sets the method to "POST".'
    syntax:
      content: >-
        function post(url: string, configuration: SPHttpClientConfiguration,
        options: ISPHttpClientOptions)
      parameters:
        - id: url
          type:
            - string
          description: the URL to fetch
        - id: configuration
          type:
            - '@@microsoft/sp-http.SPHttpClientConfiguration'
          description: >-
            determines the default behavior of SPHttpClient; normally this
            should
              be the latest version number from SPHttpClientConfigurations
        - id: options
          type:
            - '@@microsoft/sp-http.ISPHttpClientOptions'
          description: additional options that affect the request
      return:
        type:
          - Promise<@@microsoft/sp-http.SPHttpClientResponse>
  - uid: '@microsoft/sp-http.SPHttpClient.serviceKey'
    name: serviceKey
    fullName: serviceKey
    children: []
    langs:
      - typeScript
    type: property
    summary: The service key for SPHttpClient.
    syntax:
      content: static ServiceKey<SPHttpClient> serviceKey
      return:
        type:
          - ServiceKey<@@microsoft/sp-http.SPHttpClient>
  - uid: '@microsoft/sp-http.SPHttpClient.constructor'
    name: SPHttpClient
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new SPHttpClient(serviceScope: ServiceScope)'
      parameters:
        - id: serviceScope
          type:
            - ServiceScope
          description: ''
