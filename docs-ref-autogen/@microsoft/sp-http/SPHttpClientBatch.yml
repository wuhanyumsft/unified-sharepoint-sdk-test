### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-http.SPHttpClientBatch'
    name: SPHttpClientBatch
    fullName: SPHttpClientBatch
    children:
      - '@microsoft/sp-http.SPHttpClientBatch.configurations'
      - '@microsoft/sp-http.SPHttpClientBatch.execute'
      - '@microsoft/sp-http.SPHttpClientBatch.fetch'
      - '@microsoft/sp-http.SPHttpClientBatch.get'
      - '@microsoft/sp-http.SPHttpClientBatch.post'
      - '@microsoft/sp-http.SPHttpClientBatch.constructor'
    langs:
      - typeScript
    type: class
    summary: >
      The SPHttpClientBatch class accumulates a number of REST service calls and

      transmits them as a single ODATA batch.  This protocol is documented here:

      http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html

      The usage is to call SPHttpClientBatch.fetch() to queue each individual
      request,

      and then call SPHttpClientBatch.execute() to execute the batch operation.

      The execute() method returns a promise that resolves when the real REST

      call has completed.  Each call to fetch() also returns a promise that will

      resolve with an SPHttpClientResponse object for that particular request.
    source:
      path: spHttpClient/SPHttpClientBatch.ts
      startLine: 48
      remote:
        path: spfx-core/sp-http/src\spHttpClient/SPHttpClientBatch.ts
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-http'
    isPreview: true
  - uid: '@microsoft/sp-http.SPHttpClientBatch.configurations'
    name: configurations
    fullName: configurations
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The standard predefined SPHttpClientBatchConfigurations objects for use
      with

      the SPHttpClientBatch class.
    syntax:
      content: static ISPHttpClientBatchConfigurations configurations
      return:
        type:
          - '@@microsoft/sp-http.ISPHttpClientBatchConfigurations'
  - uid: '@microsoft/sp-http.SPHttpClientBatch.execute'
    name: execute
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Executes the batched queries that were queued using
      SPHttpClientBatch.fetch().
    syntax:
      content: function execute()
      parameters: []
      return:
        type:
          - Promise<@@microsoft/sp-http.SPHttpClientBatch>
  - uid: '@microsoft/sp-http.SPHttpClientBatch.fetch'
    name: fetch
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queues a new request, and returns a promise that can be used to access
      the server response (after execute() has completed).
    syntax:
      content: >-
        function fetch(url: string, configuration:
        SPHttpClientBatchConfiguration, options?: ISPHttpClientBatchOptions)
      parameters:
        - id: url
          type:
            - string
          description: the URL to fetch
        - id: configuration
          type:
            - '@@microsoft/sp-http.SPHttpClientBatchConfiguration'
          description: >-
            determines the default behavior of this request; normally this
            should
              be the latest version number from SPHttpClientBatchConfigurations
        - id: options
          type:
            - '@@microsoft/sp-http.ISPHttpClientBatchOptions'
          description: |
            additional options that affect the request
          optional: true
      return:
        type:
          - Promise<@@microsoft/sp-http.SPHttpClientResponse>
    remarks: >-
      The parameters for this function are basically the same as the WHATWG API
      standard

      documented here:


      {@link https://fetch.spec.whatwg.org/ }


      However, be aware that certain REST headers are ignored or not allowed
      inside

      a batch.  See the ODATA documentation for details.


      When execute() is called, it will POST to a URL such as

      "http://example.com/sites/sample/_api/$batch".  Typically
      SPHttpClientBatch can successfully

      guess the appropriate SPWeb URL by looking for a reserved URL segment such
      as "_api"

      in the first URL passed to fetch().  If not, use
      ISPHttpClientBatchCreationOptions.webUrl to specify it

      explicitly.
  - uid: '@microsoft/sp-http.SPHttpClientBatch.get'
    name: get
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Calls fetch(), but sets the method to ''GET''.'
    syntax:
      content: >-
        function get(url: string, configuration: SPHttpClientBatchConfiguration,
        options?: ISPHttpClientBatchOptions)
      parameters:
        - id: url
          type:
            - string
          description: the URL to fetch
        - id: configuration
          type:
            - '@@microsoft/sp-http.SPHttpClientBatchConfiguration'
          description: >-
            determines the default behavior of this request; normally this
            should
              be the latest version number from SPHttpClientBatchConfigurations
        - id: options
          type:
            - '@@microsoft/sp-http.ISPHttpClientBatchOptions'
          description: additional options that affect the request
          optional: true
      return:
        type:
          - Promise<@@microsoft/sp-http.SPHttpClientResponse>
  - uid: '@microsoft/sp-http.SPHttpClientBatch.post'
    name: post
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Calls fetch(), but sets the method to ''POST''.'
    syntax:
      content: >-
        function post(url: string, configuration:
        SPHttpClientBatchConfiguration, options: ISPHttpClientBatchOptions)
      parameters:
        - id: url
          type:
            - string
          description: the URL to fetch
        - id: configuration
          type:
            - '@@microsoft/sp-http.SPHttpClientBatchConfiguration'
          description: >-
            determines the default behavior of this request; normally this
            should
              be the latest version number from SPHttpClientBatchConfigurations
        - id: options
          type:
            - '@@microsoft/sp-http.ISPHttpClientBatchOptions'
          description: additional options that affect the request
      return:
        type:
          - Promise<@@microsoft/sp-http.SPHttpClientResponse>
  - uid: '@microsoft/sp-http.SPHttpClientBatch.constructor'
    name: SPHttpClientBatch
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Generally third parties should not use this constructor.

      The recommended way to start a batch is by calling
      SPHttpClient.beginBatch().
    syntax:
      content: >-
        new SPHttpClientBatch(serviceScope: ServiceScope, batchCreationOptions:
        ISPHttpClientBatchCreationOptions)
      parameters:
        - id: serviceScope
          type:
            - ServiceScope
          description: ''
        - id: batchCreationOptions
          type:
            - '@@microsoft/sp-http.ISPHttpClientBatchCreationOptions'
          description: ''
