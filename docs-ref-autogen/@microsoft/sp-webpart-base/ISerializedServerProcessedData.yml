### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-webpart-base.ISerializedServerProcessedData'
    name: ISerializedServerProcessedData
    fullName: ISerializedServerProcessedData
    children:
      - '@microsoft/sp-webpart-base.ISerializedServerProcessedData.htmlStrings'
      - '@microsoft/sp-webpart-base.ISerializedServerProcessedData.imageSources'
      - '@microsoft/sp-webpart-base.ISerializedServerProcessedData.links'
      - >-
        @microsoft/sp-webpart-base.ISerializedServerProcessedData.searchablePlainTexts
    langs:
      - typeScript
    type: interface
    summary: >-
      Contains collections of data that can be processed by server side services
      like search index and link fixup
    source:
      path: core/ISerializedServerProcessedData.ts
      startLine: 38
      remote:
        path: spfx-core/sp-webpart-base/src\core/ISerializedServerProcessedData.ts
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-webpart-base'
  - uid: '@microsoft/sp-webpart-base.ISerializedServerProcessedData.htmlStrings'
    name: htmlStrings
    fullName: htmlStrings
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A key-value map where keys are string identifiers and values are rich text
      with HTML format.
    optional: true
    syntax:
      content: 'htmlStrings?: [key: string]: string'
      return:
        type:
          - '[key: string]: string'
    remarks: >-
      SharePoint servers treat the values as HTML content and run services like
      safety checks, search index

      and link fixup on them.


      Example:

      {
        'myRichDescription': '<div>Some standard <b>HTML content</b><a href='http://somelink'>A Link</a></div>'
        'anotherRichText': <div class='aClass'><span style='color:red'>Some red text</div>
      }
  - uid: '@microsoft/sp-webpart-base.ISerializedServerProcessedData.imageSources'
    name: imageSources
    fullName: imageSources
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A key-value map where keys are string identifiers and values are image
      sources.
    optional: true
    syntax:
      content: 'imageSources?: [key: string]: string'
      return:
        type:
          - '[key: string]: string'
    remarks: >-
      SharePoint servers treat the values as image sources and run services like
      search index and link fixup on them.


      Example:

      {
        'myImage1': 'http://res.contoso.com/path/to/file'
        'myImage2': 'https://res.contoso.com/someName.jpg'
      }
  - uid: '@microsoft/sp-webpart-base.ISerializedServerProcessedData.links'
    name: links
    fullName: links
    children: []
    langs:
      - typeScript
    type: property
    summary: A key-value map where keys are string identifiers and values are links.
    optional: true
    syntax:
      content: 'links?: [key: string]: string'
      return:
        type:
          - '[key: string]: string'
    remarks: >-
      SharePoint servers treat the values as links and run services like link
      fixup on them.


      Example:

      {
        'myWebURL': 'http://contoso.com'
        'myFileLink': 'https://res.contoso.com/file.docx'
      }
  - uid: >-
      @microsoft/sp-webpart-base.ISerializedServerProcessedData.searchablePlainTexts
    name: searchablePlainTexts
    fullName: searchablePlainTexts
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A key-value map where keys are string identifiers and values are strings
      that should be search indexed.
    optional: true
    syntax:
      content: 'searchablePlainTexts?: [key: string]: string'
      return:
        type:
          - '[key: string]: string'
    remarks: >-
      The values are HTML-encoded before being sent to the server. The encoded
      values are visible to the search

      indexer, but are not treated as valid HTML. So, other services such as
      link fixup will not run on them.


      Example:

      {
       'justSomeText': 'This is some plain text',
       'anotherText': 'Can have <any> characters here: "<>&\''
      }
