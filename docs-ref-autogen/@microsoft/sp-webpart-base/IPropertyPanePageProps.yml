### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-webpart-base.IPropertyPanePageProps'
    name: IPropertyPanePageProps
    fullName: IPropertyPanePageProps
    children:
      - >-
        @microsoft/sp-webpart-base.IPropertyPanePageProps.displayGroupsAsAccordion
      - '@microsoft/sp-webpart-base.IPropertyPanePageProps.onChange'
      - '@microsoft/sp-webpart-base.IPropertyPanePageProps.pageDescription'
      - '@microsoft/sp-webpart-base.IPropertyPanePageProps.pageNumber'
      - '@microsoft/sp-webpart-base.IPropertyPanePageProps.properties'
      - '@microsoft/sp-webpart-base.IPropertyPanePageProps.propertyGroups'
      - >-
        @microsoft/sp-webpart-base.IPropertyPanePageProps.propertyPaneGroupStateChanged
      - >-
        @microsoft/sp-webpart-base.IPropertyPanePageProps.propertyPanePagesStateMap
      - '@microsoft/sp-webpart-base.IPropertyPanePageProps.setContainerDiv'
      - '@microsoft/sp-webpart-base.IPropertyPanePageProps.setEntryState'
    langs:
      - typeScript
    type: interface
    summary: PropertyPanePage props.
    source:
      path: propertyPane/propertyPanePage/IPropertyPanePage.ts
      startLine: 15
      remote:
        path: >-
          spfx-core/sp-webpart-base/src\propertyPane/propertyPanePage/IPropertyPanePage.ts
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-webpart-base'
  - uid: '@microsoft/sp-webpart-base.IPropertyPanePageProps.displayGroupsAsAccordion'
    name: displayGroupsAsAccordion
    fullName: displayGroupsAsAccordion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Indicates whether the groups on the PropertyPanePage should be displayed
      as an Accordion or not.

      Defaullt value is false.
    syntax:
      content: boolean displayGroupsAsAccordion
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-webpart-base.IPropertyPanePageProps.onChange'
    name: onChange
    fullName: onChange
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback triggered when there is a change in any of the
      PropertyPaneFields.
    syntax:
      content: '(targetProperty: string, value: any) => void onChange'
      return:
        type:
          - '(targetProperty: string, value: any) => void'
  - uid: '@microsoft/sp-webpart-base.IPropertyPanePageProps.pageDescription'
    name: pageDescription
    fullName: pageDescription
    children: []
    langs:
      - typeScript
    type: property
    summary: Description of the page.
    syntax:
      content: string pageDescription
      return:
        type:
          - string
  - uid: '@microsoft/sp-webpart-base.IPropertyPanePageProps.pageNumber'
    name: pageNumber
    fullName: pageNumber
    children: []
    langs:
      - typeScript
    type: property
    summary: Page number (used for internal purposes).
    syntax:
      content: number pageNumber
      return:
        type:
          - number
  - uid: '@microsoft/sp-webpart-base.IPropertyPanePageProps.properties'
    name: properties
    fullName: properties
    children: []
    langs:
      - typeScript
    type: property
    summary: Properties bag of the web part.
    syntax:
      content: any properties
      return:
        type:
          - any
  - uid: '@microsoft/sp-webpart-base.IPropertyPanePageProps.propertyGroups'
    name: propertyGroups
    fullName: propertyGroups
    children: []
    langs:
      - typeScript
    type: property
    summary: An array of PropertyPaneGroups to be displayed.
    syntax:
      content: 'IPropertyPaneGroup[] propertyGroups'
      return:
        type:
          - '@@microsoft/sp-webpart-base.IPropertyPaneGroup[]'
  - uid: >-
      @microsoft/sp-webpart-base.IPropertyPanePageProps.propertyPaneGroupStateChanged
    name: propertyPaneGroupStateChanged
    fullName: propertyPaneGroupStateChanged
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback method to indicate that the end user has changed the state of the
      PropertyPane group.
    syntax:
      content: >-
        (pageNumber: number, groupName: string, isCollapsed: boolean) => void
        propertyPaneGroupStateChanged
      return:
        type:
          - >-
            (pageNumber: number, groupName: string, isCollapsed: boolean) =>
            void
  - uid: >-
      @microsoft/sp-webpart-base.IPropertyPanePageProps.propertyPanePagesStateMap
    name: propertyPanePagesStateMap
    fullName: propertyPanePagesStateMap
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Dictionary to maintain the state of all the groups, after the end user
      modifies it.
    syntax:
      content: PropertyPanePagesStateMap propertyPanePagesStateMap
      return:
        type:
          - PropertyPanePagesStateMap
  - uid: '@microsoft/sp-webpart-base.IPropertyPanePageProps.setContainerDiv'
    name: setContainerDiv
    fullName: setContainerDiv
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback method, which sets the PropertyPanePage element as the container
      for all the elements

      within the ProeprtyPanePage. This is used to get the first focussable
      element within the container

      to set the focus to.
    syntax:
      content: '(propertypanepage: HTMLDivElement) => void setContainerDiv'
      return:
        type:
          - '(propertypanepage: HTMLDivElement) => void'
  - uid: '@microsoft/sp-webpart-base.IPropertyPanePageProps.setEntryState'
    name: setEntryState
    fullName: setEntryState
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback to set the entry state of the PropertyPane.

      This callback internally is responsible for changing the state of
      'Apply'/'Cancel' buttons and

      update the invalidEntries dictionary.
    syntax:
      content: '(targetProperty: string, isValidEntry: boolean) => void setEntryState'
      return:
        type:
          - '(targetProperty: string, isValidEntry: boolean) => void'
