### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-webpart-base.BaseClientSideWebPart'
    name: BaseClientSideWebPart
    fullName: BaseClientSideWebPart<TProperties>
    children:
      - '@microsoft/sp-webpart-base.BaseClientSideWebPart.constructor'
    langs:
      - typeScript
    type: class
    summary: >-
      This abstract class implements the the base functionality for a client
      side web part. Every client side web part

      needs to inherit from this class.
    extends:
      name: '@@microsoft/sp-webpart-base.BaseClientSideWebPart'
    source:
      path: core/BaseClientSideWebPart.ts
      startLine: 75
      remote:
        path: spfx-core/sp-webpart-base/src\core/BaseClientSideWebPart.ts
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-webpart-base'
    remarks: >-
      Along with the base functionality, this class provides some APIs that can
      be

      used by the web part. These APIs fall in two catagories.


      The first category of APIs provide data and functionality. Example, the
      web part context (i.e. this.context). This

      API should be used to access contextual data relevant to this web part
      instance.


      The second category of APIs provide a base implementation for the web part
      lifecycle and can be overridden for an

      updated implementation. The render() API is the only API that is mandatory
      to be implemented/overridden by a web

      part. All other life cycle APIs have a base implementation and can be
      overridden based on the needs of the web part.

      Please refer to the documentation of the individual APIs to make the right
      decision.
  - uid: '@microsoft/sp-webpart-base.BaseClientSideWebPart.constructor'
    name: BaseClientSideWebPart
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Constructor for the BaseClientSideWebPart class.
    syntax:
      content: new BaseClientSideWebPart()
      parameters: []
    remarks: >-
      If a sub class overrides the constructor, it needs to call super() as the
      first line of its constructor.

      It is highly recommended that the web part use the OnInit API to perform
      any web part specific initialization.

      Most of the web part features like this.context and this.properties are
      not available to be used before the

      the onInit part of the web part loading lifecycle.


      e.g.
        constructor() {
          super();
          .
          . class specific constructor code ..
        }
