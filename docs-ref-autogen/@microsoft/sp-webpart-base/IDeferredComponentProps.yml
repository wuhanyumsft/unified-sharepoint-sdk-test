### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-webpart-base.IDeferredComponentProps'
    name: IDeferredComponentProps
    fullName: IDeferredComponentProps<ComponentProps>
    children:
      - '@microsoft/sp-webpart-base.IDeferredComponentProps.deferredProps'
      - '@microsoft/sp-webpart-base.IDeferredComponentProps.duration'
      - '@microsoft/sp-webpart-base.IDeferredComponentProps.onAfterLoad'
    langs:
      - typeScript
    type: interface
    summary: Deferred component props.
    extends:
      name: any
    source:
      path: components/deferredComponent/DeferredComponent.tsx
      startLine: 13
      remote:
        path: >-
          spfx-core/sp-webpart-base/src\components/deferredComponent/DeferredComponent.tsx
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-webpart-base'
  - uid: '@microsoft/sp-webpart-base.IDeferredComponentProps.deferredProps'
    name: deferredProps
    fullName: deferredProps
    children: []
    langs:
      - typeScript
    type: property
    summary: The props of the deferred React component.
    optional: true
    syntax:
      content: ComponentProps deferredProps
      return:
        type:
          - ComponentProps
  - uid: '@microsoft/sp-webpart-base.IDeferredComponentProps.duration'
    name: duration
    fullName: duration
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Number of milliseconds to delay invoking the loader when the component
      will mount. Default is 0. If a negative

      value is specified then loading must be manually invoked.
    optional: true
    syntax:
      content: number duration
      return:
        type:
          - number
  - uid: '@microsoft/sp-webpart-base.IDeferredComponentProps.onAfterLoad'
    name: onAfterLoad
    fullName: onAfterLoad
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      An array of callbacks invoked after the _internalLoad Promise is resolved.
      Rendering is asynchronous so there

      is no gurantee that is complete.
    optional: true
    syntax:
      content: 'Function[] onAfterLoad'
      return:
        type:
          - 'Function[]'
