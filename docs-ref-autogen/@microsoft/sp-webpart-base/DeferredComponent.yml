### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-webpart-base.DeferredComponent'
    name: DeferredComponent
    fullName: DeferredComponent<IProps>
    children:
      - '@microsoft/sp-webpart-base.DeferredComponent.componentDidMount'
      - '@microsoft/sp-webpart-base.DeferredComponent.componentWillReceiveProps'
      - '@microsoft/sp-webpart-base.DeferredComponent.constructor'
      - '@microsoft/sp-webpart-base.DeferredComponent.load'
      - '@microsoft/sp-webpart-base.DeferredComponent.render'
    langs:
      - typeScript
    type: class
    summary: >-
      DeferredComponent is a generic React component to define the pattern of
      React components loaded after

      the initial code download.
    extends:
      name: >-
        @@microsoft/sp-webpart-base.DeferredComponent<@@microsoft/sp-webpart-base.IDeferredComponentProps<IProps>>
    source:
      path: components/deferredComponent/DeferredComponent.tsx
      startLine: 58
      remote:
        path: >-
          spfx-core/sp-webpart-base/src\components/deferredComponent/DeferredComponent.tsx
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-webpart-base'
  - uid: '@microsoft/sp-webpart-base.DeferredComponent.componentDidMount'
    name: componentDidMount
    children: []
    type: method
    langs:
      - typeScript
    summary: Start component loading when the component mounts.
    syntax:
      content: function componentDidMount()
      parameters: []
  - uid: '@microsoft/sp-webpart-base.DeferredComponent.componentWillReceiveProps'
    name: componentWillReceiveProps
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Attempt to load if nextProps.duration indicates we should try to load and
      we have no previous attempts.
    syntax:
      content: >-
        function componentWillReceiveProps(nextProps:
        IDeferredComponentProps<IProps>)
      parameters:
        - id: nextProps
          type:
            - '@@microsoft/sp-webpart-base.IDeferredComponentProps<IProps>'
          description: ''
  - uid: '@microsoft/sp-webpart-base.DeferredComponent.constructor'
    name: DeferredComponent
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Construct a new instance of the DeferredComponent component.
    syntax:
      content: 'new DeferredComponent(props: IDeferredComponentProps<IProps>)'
      parameters:
        - id: props
          type:
            - '@@microsoft/sp-webpart-base.IDeferredComponentProps<IProps>'
          description: |
            DeferredComponent props
  - uid: '@microsoft/sp-webpart-base.DeferredComponent.load'
    name: load
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Invokes _internalLoad to download the deferred code. After the download is
      complete,

      re-render with a new instance of the deferred component and invoke any
      onAfterLoad callbacks.
    syntax:
      content: function load()
      parameters: []
      return:
        type:
          - Promise<ComponentClass<IProps>>
  - uid: '@microsoft/sp-webpart-base.DeferredComponent.render'
    name: render
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Render, if loaded, the deferred React component. If not loaded, skip
      rendering.
    syntax:
      content: function render()
      parameters: []
      return:
        type:
          - React
