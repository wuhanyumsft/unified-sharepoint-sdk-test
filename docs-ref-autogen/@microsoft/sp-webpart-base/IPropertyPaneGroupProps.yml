### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-webpart-base.IPropertyPaneGroupProps'
    name: IPropertyPaneGroupProps
    fullName: IPropertyPaneGroupProps
    children:
      - >-
        @microsoft/sp-webpart-base.IPropertyPaneGroupProps.displayGroupsAsAccordion
      - '@microsoft/sp-webpart-base.IPropertyPaneGroupProps.onChange'
      - '@microsoft/sp-webpart-base.IPropertyPaneGroupProps.pageNumber'
      - '@microsoft/sp-webpart-base.IPropertyPaneGroupProps.properties'
      - >-
        @microsoft/sp-webpart-base.IPropertyPaneGroupProps.propertyPaneGroupStateChanged
      - >-
        @microsoft/sp-webpart-base.IPropertyPaneGroupProps.propertyPanePagesStateMap
      - '@microsoft/sp-webpart-base.IPropertyPaneGroupProps.setEntryState'
    langs:
      - typeScript
    type: interface
    summary: Interface for PropertyPaneGroup props.
    extends:
      name: '@@microsoft/sp-webpart-base.IPropertyPaneGroup'
    package: '@microsoft/sp-webpart-base'
  - uid: >-
      @microsoft/sp-webpart-base.IPropertyPaneGroupProps.displayGroupsAsAccordion
    name: displayGroupsAsAccordion
    fullName: displayGroupsAsAccordion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Indicates whether the groups on the PropertyPanePage should be displayed
      as an Accordion or not.

      Defaullt value is false.
    syntax:
      content: boolean displayGroupsAsAccordion
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-webpart-base.IPropertyPaneGroupProps.onChange'
    name: onChange
    fullName: onChange
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback triggered when there is a change in any of the
      PropertyPaneFields.
    syntax:
      content: '(targetProperty: string, value: any) => void onChange'
      return:
        type:
          - '(targetProperty: string, value: any) => void'
  - uid: '@microsoft/sp-webpart-base.IPropertyPaneGroupProps.pageNumber'
    name: pageNumber
    fullName: pageNumber
    children: []
    langs:
      - typeScript
    type: property
    summary: Page on which the current group is present.
    syntax:
      content: number pageNumber
      return:
        type:
          - number
  - uid: '@microsoft/sp-webpart-base.IPropertyPaneGroupProps.properties'
    name: properties
    fullName: properties
    children: []
    langs:
      - typeScript
    type: property
    summary: Properties bag of the web part.
    syntax:
      content: any properties
      return:
        type:
          - any
  - uid: >-
      @microsoft/sp-webpart-base.IPropertyPaneGroupProps.propertyPaneGroupStateChanged
    name: propertyPaneGroupStateChanged
    fullName: propertyPaneGroupStateChanged
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback method to indicate that the end user has changed the state of the
      PropertyPane group.
    syntax:
      content: >-
        (pageNumber: number, groupName: string, isCollapsed: boolean) => void
        propertyPaneGroupStateChanged
      return:
        type:
          - >-
            (pageNumber: number, groupName: string, isCollapsed: boolean) =>
            void
  - uid: >-
      @microsoft/sp-webpart-base.IPropertyPaneGroupProps.propertyPanePagesStateMap
    name: propertyPanePagesStateMap
    fullName: propertyPanePagesStateMap
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Dictionary to maintain the state of all the groups, after the end user
      modifies it.
    syntax:
      content: PropertyPanePagesStateMap propertyPanePagesStateMap
      return:
        type:
          - PropertyPanePagesStateMap
  - uid: '@microsoft/sp-webpart-base.IPropertyPaneGroupProps.setEntryState'
    name: setEntryState
    fullName: setEntryState
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Callback to set the entry state of the PropertyPane.

      This callback internally is responsible for changing the state of
      'Apply'/'Cancel' buttons and

      update the invalidEntries dictionary.
    syntax:
      content: '(targetProperty: string, isValidEntry: boolean) => void setEntryState'
      return:
        type:
          - '(targetProperty: string, isValidEntry: boolean) => void'
