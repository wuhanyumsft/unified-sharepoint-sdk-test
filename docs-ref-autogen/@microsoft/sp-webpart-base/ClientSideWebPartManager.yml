### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager'
    name: ClientSideWebPartManager
    fullName: ClientSideWebPartManager
    children:
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.constructor'
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.dispose'
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.disposeWebparts'
      - >-
        @microsoft/sp-webpart-base.ClientSideWebPartManager.fetchWebPartManifests
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.getWebPartManifests'
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.isMaintenanceMode'
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.isPropertyPaneOpen'
      - >-
        @microsoft/sp-webpart-base.ClientSideWebPartManager.isPropertyPaneRenderedByWebPart
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.loadWebPart'
      - >-
        @microsoft/sp-webpart-base.ClientSideWebPartManager.notifyWebPartContainerResize
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.onWebPartDelete'
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.renderError'
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.serialize'
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.setDisplayMode'
      - >-
        @microsoft/sp-webpart-base.ClientSideWebPartManager.setPropertyPaneControl
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.setPropertyPaneState'
      - '@microsoft/sp-webpart-base.ClientSideWebPartManager.setWebPartData'
      - >-
        @microsoft/sp-webpart-base.ClientSideWebPartManager.tryGeneratePreviewImageUrl
    langs:
      - typeScript
    type: class
    summary: >
      The ClientSideWebPartManager is expected to be the public interface to
      client side web parts. Each

      host is expected to create an instance of this class and manage loading of
      all web parts in that host

      through that one instance. e.g. On one page, if there are multiple Canvas
      objects, each one could have

      one instance of this class. If the page hosts web parts without the
      Canvas, then the page can have an

      instance of this class. Overall this class is expected to provide the
      following purpose:
         - Orchestrates loading of one or more web parts in a host.
         - It takes care of loading web part dependencies asynchronously. Each web part loads completely
           independently of the other web parts in the host.
         - Keep a reference to all the loaded web parts and help provide bulk operations on the web parts.
         - Help manage memory leak type issues in one place.
         - Integrate the web parts with the PropertyPane and other external entities.
         - Help troubleshoot web parts during escalations.
    package: '@microsoft/sp-webpart-base'
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.constructor'
    name: ClientSideWebPartManager
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Initialize the ClientSideWebPartManager.
    syntax:
      content: 'new ClientSideWebPartManager(host: IWebPartHost)'
      parameters:
        - id: host
          type:
            - '@@microsoft/sp-webpart-base.IWebPartHost'
          description: >
            Reference to the host. A web part host is a component that is deemed
            capable of hosting a web

            part. Any component that implements the IWebPartHost is allowed to
            host a web part.
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.dispose'
    name: dispose
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Dispose of the current webpart manager and all of the webparts it has
      loaded.
    syntax:
      content: function dispose()
      parameters: []
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.disposeWebparts'
    name: disposeWebparts
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Dispose the specified web part. If no web part is specified, dispose all
      web parts.
    syntax:
      content: 'function disposeWebparts(instanceId?: string)'
      parameters:
        - id: instanceId
          type:
            - string
          description: |
            instance id of the web part.
          optional: true
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.fetchWebPartManifests'
    name: fetchWebPartManifests
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fetch web part manifests. This makes a REST call to load the current
      site's web parts into the module loader.
    syntax:
      content: function fetchWebPartManifests()
      parameters: []
      return:
        type:
          - Promise<void>
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.getWebPartManifests'
    name: getWebPartManifests
    children: []
    type: method
    langs:
      - typeScript
    summary: Get list of active web part manifests.
    syntax:
      content: function getWebPartManifests()
      parameters: []
      return:
        type:
          - 'IClientSideWebPartManifest<any>[]'
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.isMaintenanceMode'
    name: isMaintenanceMode
    fullName: isMaintenanceMode
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns true if the maintenanceMode query string parameter is provided.
    syntax:
      content: static boolean isMaintenanceMode
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.isPropertyPaneOpen'
    name: isPropertyPaneOpen
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the state of the PropertyPane if it is open or not.
    syntax:
      content: function isPropertyPaneOpen()
      parameters: []
      return:
        type:
          - boolean
  - uid: >-
      @microsoft/sp-webpart-base.ClientSideWebPartManager.isPropertyPaneRenderedByWebPart
    name: isPropertyPaneRenderedByWebPart
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns true if the current property pane source is a web part and not the
      Canvas or any other source.
    syntax:
      content: function isPropertyPaneRenderedByWebPart()
      parameters: []
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.loadWebPart'
    name: loadWebPart
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Load a web part in the provided DOM element. Does the following steps
         - Validate params.
         - Validate the web part manifest.
         - Perform an async import of the web part modules from the provided manifest.
         - Instantiate the web part object.
         - Perform web part lifecycle events like deserialization, initalization and rendering.
         - If an error happens during any of the above steps, catch the error and log it.
    syntax:
      content: 'function loadWebPart(context: IWebPartManagerContext)'
      parameters:
        - id: context
          type:
            - '@@microsoft/sp-webpart-base.IWebPartManagerContext'
          description: |
            web part manager context.
      return:
        type:
          - Promise<void>
  - uid: >-
      @microsoft/sp-webpart-base.ClientSideWebPartManager.notifyWebPartContainerResize
    name: notifyWebPartContainerResize
    children: []
    type: method
    langs:
      - typeScript
    summary: Notify webparts that their container has resized.
    syntax:
      content: 'function notifyWebPartContainerResize(instanceId?: string)'
      parameters:
        - id: instanceId
          type:
            - string
          description: |
            if specified only notify one webpart that its container has resized
          optional: true
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.onWebPartDelete'
    name: onWebPartDelete
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Method to handle the web part delete action from the host. There is a key
      distinction between delete and dispose.

      Delete implies that the web part has been deleted from the page and the
      web part should dispose all the server

      side or other external resources attached to the web part. Dispose implies
      that an in-place navigation is

      happening and the web part manager should delete the web part from its
      cache.
    syntax:
      content: 'function onWebPartDelete(instanceId: string)'
      parameters:
        - id: instanceId
          type:
            - string
          description: |
            instance id of the webpart which is deleted.
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.renderError'
    name: renderError
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Render an error message in the web part container div.  Also logs the
      error message to the IWebPartHost logger.
    syntax:
      content: 'function renderError(domElement: HTMLElement, error: Error)'
      parameters:
        - id: domElement
          type:
            - HTMLElement
          description: ''
        - id: error
          type:
            - Error
          description: ''
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.serialize'
    name: serialize
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Serialize the specified web part. If no web part is specified, serialize
      all web parts.
    syntax:
      content: 'function serialize(instanceId?: string)'
      parameters:
        - id: instanceId
          type:
            - string
          description: |
            instance id of the web part.
          optional: true
      return:
        type:
          - Map<string>
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.setDisplayMode'
    name: setDisplayMode
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set the display mode of the specified web part. If no web part id is
      specified, switch mode of all web parts.

      If the display mode passed is same as the current mode, no change is
      applied.
    syntax:
      content: 'function setDisplayMode(displayMode: DisplayMode, instanceId?: string)'
      parameters:
        - id: displayMode
          type:
            - DisplayMode
          description: the new DisplayMode.
        - id: instanceId
          type:
            - string
          description: |
            instance id of the web part.
          optional: true
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.setPropertyPaneControl'
    name: setPropertyPaneControl
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set a IPropertyPaneControl object into the set of the Client Side Web Part
      Manager's

      managed web parts.
    syntax:
      content: >-
        function setPropertyPaneControl(id: string, control:
        IPropertyPaneControl)
      parameters:
        - id: id
          type:
            - string
          description: A unique instance id.
        - id: control
          type:
            - '@@microsoft/sp-webpart-base.IPropertyPaneControl'
          description: >
            A control that implements the minimum subset of
            IClientSideWebPartInternal
              needed to utilize the Property Pane.
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.setPropertyPaneState'
    name: setPropertyPaneState
    children: []
    type: method
    langs:
      - typeScript
    summary: Set the property pane state which helps configuring the web part.
    syntax:
      content: >-
        function setPropertyPaneState(instanceId: string, propertyPaneState:
        PropertyPaneState, renderedByWebPart?: boolean)
      parameters:
        - id: instanceId
          type:
            - string
          description: web part instance id.
        - id: propertyPaneState
          type:
            - '@@microsoft/sp-webpart-base.PropertyPaneState'
          description: indicates in what state the PropertyPane should be.
        - id: renderedByWebPart
          type:
            - boolean
          description: >
            is the property pane rendered by a web part and not by Canvas or any
            other source.
          optional: true
  - uid: '@microsoft/sp-webpart-base.ClientSideWebPartManager.setWebPartData'
    name: setWebPartData
    children: []
    type: method
    langs:
      - typeScript
    summary: Set the web part data for the specified web part and re-render it.
    syntax:
      content: 'function setWebPartData(webPartData: IWebPartData, instanceId: string)'
      parameters:
        - id: webPartData
          type:
            - '@@microsoft/sp-webpart-base.IWebPartData'
          description: the new web part data.
        - id: instanceId
          type:
            - string
          description: |
            instance id of the web part.
  - uid: >-
      @microsoft/sp-webpart-base.ClientSideWebPartManager.tryGeneratePreviewImageUrl
    name: tryGeneratePreviewImageUrl
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryGeneratePreviewImageUrl(instanceIds?: string[])'
      parameters:
        - id: instanceIds
          type:
            - 'string[]'
          description: ''
          optional: true
      return:
        type:
          - string | undefined
