### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-loader.RequireJsLoader'
    name: RequireJsLoader
    fullName: RequireJsLoader
    children:
      - '@microsoft/sp-loader.RequireJsLoader.configure'
      - '@microsoft/sp-loader.RequireJsLoader.ensure'
      - '@microsoft/sp-loader.RequireJsLoader.requireConfig'
      - '@microsoft/sp-loader.RequireJsLoader.requireDelete'
      - '@microsoft/sp-loader.RequireJsLoader.requireLoad'
    langs:
      - typeScript
    type: class
    summary: |-
      Loader for RequireJS.
      Provides the instance of RequireJS and allows methods for configuration.
    package: '@microsoft/sp-loader'
  - uid: '@microsoft/sp-loader.RequireJsLoader.configure'
    name: configure
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the config for RequireJS. Handles global exports, renames the
      dependencies.

      Also sets AddressStore with the right mapping between script and URL.
    syntax:
      content: 'function configure(manifest: IClientSideComponentManifest)'
      parameters:
        - id: manifest
          type:
            - IClientSideComponentManifest
          description: ''
  - uid: '@microsoft/sp-loader.RequireJsLoader.ensure'
    name: ensure
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Ensures that the module is present in RequireJS with the defined name.

      In order to do so, it removes any pre-existing module that was already
      loaded.
    syntax:
      content: 'function ensure(name: string, module: any)'
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: module
          type:
            - any
          description: ''
  - uid: '@microsoft/sp-loader.RequireJsLoader.requireConfig'
    name: requireConfig
    children: []
    type: method
    langs:
      - typeScript
    summary: Calls actual RequireJS config()
    syntax:
      content: 'function requireConfig(config: RequireConfig)'
      parameters:
        - id: config
          type:
            - RequireConfig
          description: ''
  - uid: '@microsoft/sp-loader.RequireJsLoader.requireDelete'
    name: requireDelete
    children: []
    type: method
    langs:
      - typeScript
    summary: Calls RequireJS undef() with the name matching the input manifest
    syntax:
      content: 'function requireDelete(manifest: IClientSideComponentManifest)'
      parameters:
        - id: manifest
          type:
            - IClientSideComponentManifest
          description: ''
  - uid: '@microsoft/sp-loader.RequireJsLoader.requireLoad'
    name: requireLoad
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls RequireJS require()

      Catches exceptions and returns a rejected promise with the error from
      RequireJS
    syntax:
      content: 'function requireLoad<TModule>(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: ''
      return:
        type:
          - Promise<TModule>
