### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy'
    name: SPComponentLoaderProxy
    fullName: SPComponentLoaderProxy
    children:
      - '@microsoft/sp-loader.SPComponentLoaderProxy.getManifests'
      - '@microsoft/sp-loader.SPComponentLoaderProxy.initialize'
      - '@microsoft/sp-loader.SPComponentLoaderProxy.loadComponent'
      - '@microsoft/sp-loader.SPComponentLoaderProxy.loadComponentById'
      - '@microsoft/sp-loader.SPComponentLoaderProxy.loadCss'
      - '@microsoft/sp-loader.SPComponentLoaderProxy.loadScript'
      - '@microsoft/sp-loader.SPComponentLoaderProxy.registerManifests'
      - '@microsoft/sp-loader.SPComponentLoaderProxy.startApplication'
      - '@microsoft/sp-loader.SPComponentLoaderProxy.tryGetManifestById'
    langs:
      - typeScript
    type: class
    summary: |-
      Component loader.
      Needs to be initialized with an implemented ISPComponentLoader.
    package: '@microsoft/sp-loader'
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy.getManifests'
    name: getManifests
    children: []
    type: method
    langs:
      - typeScript
    summary: '{@inheritdoc  ISPComponentLoader.manifests}'
    syntax:
      content: static function getManifests()
      parameters: []
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy.initialize'
    name: initialize
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Initializes the component loader with an implementation.
      Must be called once before it can be used.
    syntax:
      content: 'static function initialize(componentLoader: ISPComponentLoader)'
      parameters:
        - id: componentLoader
          type:
            - '@@microsoft/sp-loader.ISPComponentLoader'
          description: ''
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy.loadComponent'
    name: loadComponent
    children: []
    type: method
    langs:
      - typeScript
    summary: '{@inheritdoc  ISPComponentLoader.loadComponent}'
    syntax:
      content: >-
        static function loadComponent<TComponent>(manifest:
        IClientSideComponentManifest)
      parameters:
        - id: manifest
          type:
            - IClientSideComponentManifest
          description: ''
      return:
        type:
          - Promise<TComponent>
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy.loadComponentById'
    name: loadComponentById
    children: []
    type: method
    langs:
      - typeScript
    summary: '{@inheritdoc  ISPComponentLoader.loadComponentById}'
    syntax:
      content: >-
        static function loadComponentById<TComponent>(id: string, version?:
        string)
      parameters:
        - id: id
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<TComponent>
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy.loadCss'
    name: loadCss
    children: []
    type: method
    langs:
      - typeScript
    summary: '{@inheritdoc  ISPComponentLoader.loadCss}'
    syntax:
      content: 'static function loadCss(url: string)'
      parameters:
        - id: url
          type:
            - string
          description: ''
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy.loadScript'
    name: loadScript
    children: []
    type: method
    langs:
      - typeScript
    summary: '{@inheritdoc  ISPComponentLoader.loadScript}'
    syntax:
      content: >-
        static function loadScript<TModule>(url: string, options?:
        ILoadScriptOptions)
      parameters:
        - id: url
          type:
            - string
          description: ''
        - id: options
          type:
            - '@@microsoft/sp-loader.ILoadScriptOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<TModule>
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy.registerManifests'
    name: registerManifests
    children: []
    type: method
    langs:
      - typeScript
    summary: '{@inheritdoc  ISPComponentLoader.registerManifests}'
    syntax:
      content: >-
        static function registerManifests(manifests:
        IClientSideComponentManifest[])
      parameters:
        - id: manifests
          type:
            - 'IClientSideComponentManifest[]'
          description: ''
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy.startApplication'
    name: startApplication
    children: []
    type: method
    langs:
      - typeScript
    summary: '{@inheritdoc  ISPComponentLoader.startApplication}'
    syntax:
      content: >-
        static function startApplication<TApplication>(applicationId: string,
        preloadedData: IPreloadedData)
      parameters:
        - id: applicationId
          type:
            - string
          description: ''
        - id: preloadedData
          type:
            - '@@microsoft/sp-loader.IPreloadedData'
          description: ''
      return:
        type:
          - Promise<TApplication>
  - uid: '@microsoft/sp-loader.SPComponentLoaderProxy.tryGetManifestById'
    name: tryGetManifestById
    children: []
    type: method
    langs:
      - typeScript
    summary: '{@inheritdoc  ISPComponentLoader.tryGetManifestById}'
    syntax:
      content: 'static function tryGetManifestById(id: string, version?: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
        - id: version
          type:
            - string
          description: ''
          optional: true
