### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-loader.ISPComponentLoader'
    name: ISPComponentLoader
    fullName: ISPComponentLoader
    children:
      - '@microsoft/sp-loader.ISPComponentLoader.loadComponent'
      - '@microsoft/sp-loader.ISPComponentLoader.loadComponentById'
      - '@microsoft/sp-loader.ISPComponentLoader.loadCss'
      - '@microsoft/sp-loader.ISPComponentLoader.loadScript'
      - '@microsoft/sp-loader.ISPComponentLoader.manifests'
      - '@microsoft/sp-loader.ISPComponentLoader.registerManifests'
      - '@microsoft/sp-loader.ISPComponentLoader.startApplication'
      - '@microsoft/sp-loader.ISPComponentLoader.tryGetManifestById'
    langs:
      - typeScript
    type: interface
    summary: >-
      Interface for the module loader.

      It allows to load modules and scripts (through SystemJS) and CSS on the
      page.

      Also allows access to the manifests that exist in the page.
    package: '@microsoft/sp-loader'
  - uid: '@microsoft/sp-loader.ISPComponentLoader.loadComponent'
    name: loadComponent
    children: []
    type: method
    langs:
      - typeScript
    summary: Loads a component from a manifest.
    syntax:
      content: >-
        function loadComponent<TComponent>(manifest:
        IClientSideComponentManifest)
      parameters:
        - id: manifest
          type:
            - IClientSideComponentManifest
          description: Manifest of the module to load.
      return:
        type:
          - Promise<TComponent>
  - uid: '@microsoft/sp-loader.ISPComponentLoader.loadComponentById'
    name: loadComponentById
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Resolve a component id and version, and load it.'
    syntax:
      content: 'function loadComponentById<TComponent>(id: string, version?: string)'
      parameters:
        - id: id
          type:
            - string
          description: The id of the component to load.
        - id: version
          type:
            - string
          description: >-
            The version of the component to load. If version is not defined, the
            method
                               will load any version of the component.
          optional: true
      return:
        type:
          - Promise<TComponent>
  - uid: '@microsoft/sp-loader.ISPComponentLoader.loadCss'
    name: loadCss
    children: []
    type: method
    langs:
      - typeScript
    summary: Inserts a <link ... /> tag for a stylesheet.
    syntax:
      content: 'function loadCss(url: string)'
      parameters:
        - id: url
          type:
            - string
          description: |
            The CSS file URL.
  - uid: '@microsoft/sp-loader.ISPComponentLoader.loadScript'
    name: loadScript
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Given a URL, load a script.'
    syntax:
      content: 'function loadScript<TModule>(url: string, options?: ILoadScriptOptions)'
      parameters:
        - id: url
          type:
            - string
          description: The script URL.
        - id: options
          type:
            - '@@microsoft/sp-loader.ILoadScriptOptions'
          description: >-
            globalExportsName: If the script isn't an AMD module and loads a
            global member on the page,
                               specify the global member's name.
          optional: true
      return:
        type:
          - Promise<TModule>
  - uid: '@microsoft/sp-loader.ISPComponentLoader.manifests'
    name: manifests
    fullName: manifests
    children: []
    langs:
      - typeScript
    type: property
    summary: All registered manifests.
    syntax:
      content: 'IClientSideComponentManifest[] manifests'
      return:
        type:
          - 'IClientSideComponentManifest[]'
  - uid: '@microsoft/sp-loader.ISPComponentLoader.registerManifests'
    name: registerManifests
    children: []
    type: method
    langs:
      - typeScript
    summary: Registers manifests in the manifest store.
    syntax:
      content: 'function registerManifests(manifests: IClientSideComponentManifest[])'
      parameters:
        - id: manifests
          type:
            - 'IClientSideComponentManifest[]'
          description: |
            The manifests to register in the store.
  - uid: '@microsoft/sp-loader.ISPComponentLoader.startApplication'
    name: startApplication
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Starts the application.

      This is called by the page scripts to start loading the framework. Do not
      call it from your own code.
    syntax:
      content: >-
        function startApplication<TApplication>(applicationId: string,
        preloadedData: IPreloadedData)
      parameters:
        - id: applicationId
          type:
            - string
          description: Id of the application.
        - id: preloadedData
          type:
            - '@@microsoft/sp-loader.IPreloadedData'
          description: |
            Preloaded data for the application.
      return:
        type:
          - Promise<TApplication>
  - uid: '@microsoft/sp-loader.ISPComponentLoader.tryGetManifestById'
    name: tryGetManifestById
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a component manifest from the component id and version.
    syntax:
      content: 'function tryGetManifestById(id: string, version?: string)'
      parameters:
        - id: id
          type:
            - string
          description: GUID id of the component.
        - id: version
          type:
            - string
          description: |-
            Version of the component. If version is not defined, the method
                               will return the manifest for any version of the component.
          optional: true
