### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-loader.SystemJsLoader'
    name: SystemJsLoader
    fullName: SystemJsLoader
    children:
      - '@microsoft/sp-loader.SystemJsLoader.configure'
      - '@microsoft/sp-loader.SystemJsLoader.delete'
      - '@microsoft/sp-loader.SystemJsLoader.ensure'
      - '@microsoft/sp-loader.SystemJsLoader.getDependencies'
      - '@microsoft/sp-loader.SystemJsLoader.pluginName'
      - '@microsoft/sp-loader.SystemJsLoader.systemConfig'
      - '@microsoft/sp-loader.SystemJsLoader.systemDelete'
      - '@microsoft/sp-loader.SystemJsLoader.systemImport'
    langs:
      - typeScript
    type: class
    summary: |-
      Loader for SystemJS.
      Provides the instance of SystemJS and allows methods for configuration.
    package: '@microsoft/sp-loader'
  - uid: '@microsoft/sp-loader.SystemJsLoader.configure'
    name: configure
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the config for SystemJS. Handles global exports, renames the
      dependencies.

      Also sets AddressStore with the right mapping between script and URL.
    syntax:
      content: 'function configure(manifest: IClientSideComponentManifest)'
      parameters:
        - id: manifest
          type:
            - IClientSideComponentManifest
          description: ''
  - uid: '@microsoft/sp-loader.SystemJsLoader.delete'
    name: delete
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      If a module has been loaded with the specified name,
      it delete it from SystemJS
    syntax:
      content: 'function delete(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: ''
  - uid: '@microsoft/sp-loader.SystemJsLoader.ensure'
    name: ensure
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      If a module hasn't been loaded with the specified name,
      it created a new module and sets it in SystemJS
    syntax:
      content: 'function ensure(name: string, module: any)'
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: module
          type:
            - any
          description: ''
  - uid: '@microsoft/sp-loader.SystemJsLoader.getDependencies'
    name: getDependencies
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the dependencies of a component, as detected by SystemJS when
      importing the module.

      This method ignores the manifest dependencies and looks only at the JS
      file instead.

      Used as a helper to find mismatching dependencies.
    syntax:
      content: 'function getDependencies(manifest: IClientSideComponentManifest)'
      parameters:
        - id: manifest
          type:
            - IClientSideComponentManifest
          description: ''
  - uid: '@microsoft/sp-loader.SystemJsLoader.pluginName'
    name: pluginName
    fullName: pluginName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: static string pluginName
      return:
        type:
          - string
  - uid: '@microsoft/sp-loader.SystemJsLoader.systemConfig'
    name: systemConfig
    children: []
    type: method
    langs:
      - typeScript
    summary: Calls actual System.config()
    syntax:
      content: 'function systemConfig(config: Config)'
      parameters:
        - id: config
          type:
            - Config
          description: ''
  - uid: '@microsoft/sp-loader.SystemJsLoader.systemDelete'
    name: systemDelete
    children: []
    type: method
    langs:
      - typeScript
    summary: Calls System.delete() with the name matching the input manifest
    syntax:
      content: 'function systemDelete(manifest: IClientSideComponentManifest)'
      parameters:
        - id: manifest
          type:
            - IClientSideComponentManifest
          description: ''
  - uid: '@microsoft/sp-loader.SystemJsLoader.systemImport'
    name: systemImport
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls System.import()

      Catches exceptions and returns a rejected promise with the error from
      SystemJS
    syntax:
      content: 'function systemImport<TModule>(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: ''
      return:
        type:
          - Promise<TModule>
