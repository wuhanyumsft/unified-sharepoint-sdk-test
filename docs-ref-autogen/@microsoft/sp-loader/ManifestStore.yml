### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-loader.ManifestStore'
    name: ManifestStore
    fullName: ManifestStore
    children:
      - '@microsoft/sp-loader.ManifestStore.getManifest'
      - '@microsoft/sp-loader.ManifestStore.getRegisteredManifests'
      - '@microsoft/sp-loader.ManifestStore.registerDebugManifests'
      - '@microsoft/sp-loader.ManifestStore.registerManifests'
      - '@microsoft/sp-loader.ManifestStore.registerPreloadedManifests'
      - '@microsoft/sp-loader.ManifestStore.tryGetManifest'
    langs:
      - typeScript
    type: class
    summary: This class maintains a cache of the manifests on the current page.
    package: '@microsoft/sp-loader'
  - uid: '@microsoft/sp-loader.ManifestStore.getManifest'
    name: getManifest
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Return a manifest by its component id and version.

      If version is not provided, it will return the only available version. If
      more than

      one version is available and version is not provided, the function throws.


      Only return a debug manifest is debug is allowed. If a manifest isn't
      found by

      the provided id, the function throws.
    syntax:
      content: 'function getManifest(id: string, version?: string)'
      parameters:
        - id: id
          type:
            - string
          description: The component id of the manifest to retrieve.
        - id: version
          type:
            - string
          description: The version of the component of the manifest to retrieve.
          optional: true
      return:
        type:
          - IClientSideComponentManifest
  - uid: '@microsoft/sp-loader.ManifestStore.getRegisteredManifests'
    name: getRegisteredManifests
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all registered manifests.
    syntax:
      content: function getRegisteredManifests()
      parameters: []
  - uid: '@microsoft/sp-loader.ManifestStore.registerDebugManifests'
    name: registerDebugManifests
    children: []
    type: method
    langs:
      - typeScript
    summary: Register debug manifests on the manifest store.
    syntax:
      content: >-
        function registerDebugManifests(manifests: [key: string]:
        IClientSideComponentManifest)
      parameters:
        - id: manifests
          type:
            - '[key: string]: IClientSideComponentManifest'
          description: |
            A dictionary of debug manifests.
  - uid: '@microsoft/sp-loader.ManifestStore.registerManifests'
    name: registerManifests
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Loads additional manifests into the manifest store, updating existing
      manifests.
    syntax:
      content: >-
        function registerManifests(manifests: IClientSideComponentManifest[],
        overwriteExisting: boolean)
      parameters:
        - id: manifests
          type:
            - 'IClientSideComponentManifest[]'
          description: |
            The manifests to load into the store.
        - id: overwriteExisting
          type:
            - boolean
          description: ''
  - uid: '@microsoft/sp-loader.ManifestStore.registerPreloadedManifests'
    name: registerPreloadedManifests
    children: []
    type: method
    langs:
      - typeScript
    summary: Register the preloaded manifests on the manifest store.
    syntax:
      content: 'function registerPreloadedManifests(preloadedData: IPreloadedData)'
      parameters:
        - id: preloadedData
          type:
            - '@@microsoft/sp-loader.IPreloadedData'
          description: |
            The preloaded data
  - uid: '@microsoft/sp-loader.ManifestStore.tryGetManifest'
    name: tryGetManifest
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Return a manifest by its component id and version.

      If version is not provided, it will return the only available version. If
      more than

      one version is available and version is not provided, returns undefined.


      Only return a debug manifest is debug is allowed. If a manifest isn't
      found by

      the provided id, return undefined.
    syntax:
      content: >-
        function tryGetManifest(id: string, version?: string, shouldLog:
        boolean)
      parameters:
        - id: id
          type:
            - string
          description: The component id of the manifest to retrieve.
        - id: version
          type:
            - string
          description: The version of the component of the manifest to retrieve.
          optional: true
        - id: shouldLog
          type:
            - boolean
          description: True if failures should be logged. Defaults to true.
