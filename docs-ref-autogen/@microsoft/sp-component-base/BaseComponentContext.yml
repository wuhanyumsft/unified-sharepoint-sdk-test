### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-component-base.BaseComponentContext'
    name: BaseComponentContext
    fullName: BaseComponentContext
    children:
      - '@microsoft/sp-component-base.BaseComponentContext.constructor'
      - '@microsoft/sp-component-base.BaseComponentContext.dynamicDataProvider'
      - '@microsoft/sp-component-base.BaseComponentContext.instanceId'
      - '@microsoft/sp-component-base.BaseComponentContext.manifest'
      - '@microsoft/sp-component-base.BaseComponentContext.pageContext'
      - '@microsoft/sp-component-base.BaseComponentContext.serviceScope'
    langs:
      - typeScript
    type: class
    summary: The base class for context objects for client-side components.
    source:
      path: BaseComponentContext.ts
      startLine: 68
      remote:
        path: spfx-core/sp-component-base/src\BaseComponentContext.ts
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-component-base'
    remarks: >-
      A "context" object is a collection of well-known services and other

      objects that are likely to be needed by business logic that interacts with
      a

      associated component.  Each component type has its own specialized
      subclass

      of BaseComponentContext, e.g. WebPartContext for web parts,
      ExtensionContext for

      client-side extensions, and so on.
  - uid: '@microsoft/sp-component-base.BaseComponentContext.constructor'
    name: BaseComponentContext
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new BaseComponentContext(parameters: IComponentContextParameters)'
      parameters:
        - id: parameters
          type:
            - '@@microsoft/sp-component-base.IComponentContextParameters'
          description: ''
  - uid: '@microsoft/sp-component-base.BaseComponentContext.dynamicDataProvider'
    name: dynamicDataProvider
    fullName: dynamicDataProvider
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns the Dynamic Data Provider associated with the component
    syntax:
      content: DynamicDataProvider dynamicDataProvider
      return:
        type:
          - '@@microsoft/sp-component-base.DynamicDataProvider'
  - uid: '@microsoft/sp-component-base.BaseComponentContext.instanceId'
    name: instanceId
    fullName: instanceId
    children: []
    langs:
      - typeScript
    type: property
    summary: '{@inheritdoc BaseComponent.instanceId}'
    syntax:
      content: string instanceId
      return:
        type:
          - string
  - uid: '@microsoft/sp-component-base.BaseComponentContext.manifest'
    name: manifest
    fullName: manifest
    children: []
    langs:
      - typeScript
    type: property
    summary: Manifest for the client side component.
    syntax:
      content: 'public manifest: IClientSideComponentManifest'
      return:
        type:
          - IClientSideComponentManifest
  - uid: '@microsoft/sp-component-base.BaseComponentContext.pageContext'
    name: pageContext
    fullName: pageContext
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The page context provides standard definitions for common SharePoint
      objects

      that need to be shared between the client-side application, web parts, and
      other

      components.
    syntax:
      content: PageContext pageContext
      return:
        type:
          - PageContext
  - uid: '@microsoft/sp-component-base.BaseComponentContext.serviceScope'
    name: serviceScope
    fullName: serviceScope
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The associated <xref:%40microsoft%2Fsp-core-library%3AServiceScope> for
      this component.
    syntax:
      content: ServiceScope serviceScope
      return:
        type:
          - ServiceScope
    remarks: A child service scope is created for each client-side component.
