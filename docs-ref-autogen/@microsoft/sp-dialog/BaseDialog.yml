### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-dialog.BaseDialog'
    name: BaseDialog
    fullName: BaseDialog
    children:
      - '@microsoft/sp-dialog.BaseDialog.constructor'
      - '@microsoft/sp-dialog.BaseDialog.close'
      - '@microsoft/sp-dialog.BaseDialog.isHidden'
      - '@microsoft/sp-dialog.BaseDialog.isOpen'
      - '@microsoft/sp-dialog.BaseDialog.isSecondary'
      - '@microsoft/sp-dialog.BaseDialog.secondaryDialogProvider'
      - '@microsoft/sp-dialog.BaseDialog.show'
    langs:
      - typeScript
    type: class
    summary: >-
      The base class for implementing dialogs in SharePoint Framework. This
      provides a supported way for showing

      dialogs to the user inside SharePoint Framework components.
    package: '@microsoft/sp-dialog'
    isPreview: true
    remarks: >-
      Extend this class to create dialogs for SharePoint Framework. By following
      the guidelines in implementation,

      the framework can ensure that the dialogs are shown in a user-friendly
      manner. While the content of the dialog is

      controlled by this class by implementing the render method, the framework
      can decide when to show the dialog and

      how to render the overlay and modal. The application on the page can also
      have control on allowing dialogs to show.

      Refer to the documentation of the individual methods and properties to
      learn more about how to extend and use this

      class.
  - uid: '@microsoft/sp-dialog.BaseDialog.constructor'
    name: BaseDialog
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Constructor for the BaseDialog class.
    syntax:
      content: 'new BaseDialog(config?: IDialogConfiguration)'
      parameters:
        - id: config
          type:
            - '@@microsoft/sp-dialog.IDialogConfiguration'
          description: |
            the dialog configuration that affects how the dialog is displayed

            Example:
              constructor(cacheReference: any) {
                super();

                this._cache = cacheReference; // This is okay. Keeping a reference to my internal cache.
                this._cache.refresh(); // This is bad practice.
                // If you need to refresh the cache (or fetch data) for rendering, do it in onBeforeOpen()
              }
          optional: true
    remarks: >-
      It is important to keep the constructor lightweight. Use onBeforeOpen()
      for doing heavy-weight initialization

      that is needed for rendering the dialog such as resource allocations and
      asynchronous calls to fetch data. You

      can use the constructor to set initial parameters of your dialog such as
      references to resources in your

      application. The reason for this is that dialogs are usually constructed
      upon a UI event e.g. a button click,

      but the dialog may not always be shown right after construction. Keeping
      the constructor lightweight ensures

      smooth user experience and avoids doing throw-away work in case the dialog
      is not shown later e.g. if

      the framework rejects it. Another benefit of doing this is avoiding memory
      leaks by doing all the allocations and

      disposals in symmetric onBeforeOpen() and onAfterClose() events. If you
      allocate resources in the

      constructor, you have a memory leak because there is no guarantee
      onAfterClose() will get called,

      and onAfterClose() is your only opportunity to dispose.
  - uid: '@microsoft/sp-dialog.BaseDialog.close'
    name: close
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Close the dialog. This will void the permission to show for this dialog.
      Every dialog should have a mechanism to

      eventually close to avoid blocking the user interface. If called on an
      inactive dialog it will abort the request

      to show.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
  - uid: '@microsoft/sp-dialog.BaseDialog.isHidden'
    name: isHidden
    fullName: isHidden
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If the dialog is visually hidden. This happens when the dialog goes behind
      a secondary dialog.

      Note that this is different from closed, because the dialog still has the
      permission to show and will

      eventually unhide. This returns false if the dialog is closed.
    syntax:
      content: boolean isHidden
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-dialog.BaseDialog.isOpen'
    name: isOpen
    fullName: isOpen
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If the dialog is visually open. This returns true during onBeforeOpen()
      because there is a visual component.

      It returns false when the dialog is hidden.
    syntax:
      content: boolean isOpen
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-dialog.BaseDialog.isSecondary'
    name: isSecondary
    fullName: isSecondary
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If the dialog is a secondary dialog. This means that there is another
      dialog hidden behind this dialog.
    syntax:
      content: boolean isSecondary
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-dialog.BaseDialog.secondaryDialogProvider'
    name: secondaryDialogProvider
    fullName: secondaryDialogProvider
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      An active dialog is permitted to show a secondary dialog on top of itself.
      By design, only two layers of

      dialogs are permitted.
    syntax:
      content: SecondaryDialogProvider secondaryDialogProvider
      return:
        type:
          - SecondaryDialogProvider
    remarks: >-
      Secondary dialogs do not have to wait for permission and will immediately
      be shown or rejected. All calls to

      show a secondary dialog reject while there is already a secondary dialog
      showing.

      This property may be undefined if a secondary dialog is not available i.e.
      the current dialog is secondary itself

      or the dialog is not active.
  - uid: '@microsoft/sp-dialog.BaseDialog.show'
    name: show
    children: []
    type: method
    langs:
      - typeScript
    summary: Request the framework to show this dialog.
    syntax:
      content: 'function show(options?: IDialogShowOptions)'
      parameters:
        - id: options
          type:
            - '@@microsoft/sp-dialog.IDialogShowOptions'
          description: |
            Dialog showing options @see <xref:IDialogShowOptions>
          optional: true
      return:
        type:
          - Promise<void>
