### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-dialog.BaseDialog'
    name: BaseDialog
    fullName: BaseDialog
    children:
      - '@microsoft/sp-dialog.BaseDialog.constructor'
      - '@microsoft/sp-dialog.BaseDialog.close'
      - '@microsoft/sp-dialog.BaseDialog.isHidden'
      - '@microsoft/sp-dialog.BaseDialog.isOpen'
      - '@microsoft/sp-dialog.BaseDialog.isSecondary'
      - '@microsoft/sp-dialog.BaseDialog.secondaryDialogProvider'
      - '@microsoft/sp-dialog.BaseDialog.show'
    langs:
      - typeScript
    type: class
    summary: >-
      The base class for implementing dialogs in SharePoint Framework. This
      provides a supported way for showing

      dialogs to the user inside SharePoint Framework components.
    package: '@microsoft/sp-dialog'
    isPreview: true
  - uid: '@microsoft/sp-dialog.BaseDialog.constructor'
    name: BaseDialog
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Constructor for the BaseDialog class.
    syntax:
      content: 'new BaseDialog(config?: IDialogConfiguration)'
      parameters:
        - id: config
          type:
            - '@@microsoft/sp-dialog.IDialogConfiguration'
          description: |
            the dialog configuration that affects how the dialog is displayed

            Example:
              constructor(cacheReference: any) {
                super();

                this._cache = cacheReference; // This is okay. Keeping a reference to my internal cache.
                this._cache.refresh(); // This is bad practice.
                // If you need to refresh the cache (or fetch data) for rendering, do it in onBeforeOpen()
              }
          optional: true
  - uid: '@microsoft/sp-dialog.BaseDialog.close'
    name: close
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Close the dialog. This will void the permission to show for this dialog.
      Every dialog should have a mechanism to

      eventually close to avoid blocking the user interface. If called on an
      inactive dialog it will abort the request

      to show.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
  - uid: '@microsoft/sp-dialog.BaseDialog.isHidden'
    name: isHidden
    fullName: isHidden
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If the dialog is visually hidden. This happens when the dialog goes behind
      a secondary dialog.

      Note that this is different from closed, because the dialog still has the
      permission to show and will

      eventually unhide. This returns false if the dialog is closed.
    syntax:
      content: boolean isHidden
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-dialog.BaseDialog.isOpen'
    name: isOpen
    fullName: isOpen
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If the dialog is visually open. This returns true during onBeforeOpen()
      because there is a visual component.

      It returns false when the dialog is hidden.
    syntax:
      content: boolean isOpen
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-dialog.BaseDialog.isSecondary'
    name: isSecondary
    fullName: isSecondary
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If the dialog is a secondary dialog. This means that there is another
      dialog hidden behind this dialog.
    syntax:
      content: boolean isSecondary
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-dialog.BaseDialog.secondaryDialogProvider'
    name: secondaryDialogProvider
    fullName: secondaryDialogProvider
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      An active dialog is permitted to show a secondary dialog on top of itself.
      By design, only two layers of

      dialogs are permitted.
    syntax:
      content: SecondaryDialogProvider secondaryDialogProvider
      return:
        type:
          - SecondaryDialogProvider
  - uid: '@microsoft/sp-dialog.BaseDialog.show'
    name: show
    children: []
    type: method
    langs:
      - typeScript
    summary: Request the framework to show this dialog.
    syntax:
      content: 'function show(options?: IDialogShowOptions)'
      parameters:
        - id: options
          type:
            - '@@microsoft/sp-dialog.IDialogShowOptions'
          description: |
            Dialog showing options @see <xref:IDialogShowOptions>
          optional: true
      return:
        type:
          - Promise<void>
