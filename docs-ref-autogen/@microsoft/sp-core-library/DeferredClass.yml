### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-core-library.DeferredClass'
    name: DeferredClass
    fullName: DeferredClass<Type>
    children:
      - '@microsoft/sp-core-library.DeferredClass.create'
      - '@microsoft/sp-core-library.DeferredClass.instance'
      - '@microsoft/sp-core-library.DeferredClass.isLoaded'
      - '@microsoft/sp-core-library.DeferredClass.load'
      - '@microsoft/sp-core-library.DeferredClass.onAfterLoad'
      - '@microsoft/sp-core-library.DeferredClass.shouldLoad'
    langs:
      - typeScript
    type: class
    summary: >-
      DeferredClass is a generic class to define the pattern of code loaded
      after the initial code download.
    package: '@microsoft/sp-core-library'
  - uid: '@microsoft/sp-core-library.DeferredClass.create'
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: Instantiate an instance of Type.
    syntax:
      content: 'function create(args: any[])'
      parameters:
        - id: args
          type:
            - 'any[]'
          description: >
            A generic argument list; should match the signature of the
            constructor for Type.
      return:
        type:
          - Instance
  - uid: '@microsoft/sp-core-library.DeferredClass.instance'
    name: instance
    children: []
    type: method
    langs:
      - typeScript
    summary: Return the singleton for the derived DeferredClass.
    syntax:
      content: static function instance<ChildClass>()
      parameters: []
      return:
        type:
          - ChildClass
  - uid: '@microsoft/sp-core-library.DeferredClass.isLoaded'
    name: isLoaded
    fullName: isLoaded
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean isLoaded
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-core-library.DeferredClass.load'
    name: load
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Loads the deferred chunk. After the returned promise is resolved,
      DeferredClass.create can be used

      to create an instance of the deferred class.
    syntax:
      content: function load()
      parameters: []
      return:
        type:
          - Promise<Type>
  - uid: '@microsoft/sp-core-library.DeferredClass.onAfterLoad'
    name: onAfterLoad
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a thenable Promise to be resolved after the code has finished
      loading. Use this for cases where

      you do not want to invoke code loading but want to be notified when the
      code has loaded.
    syntax:
      content: function onAfterLoad()
      parameters: []
      return:
        type:
          - Promise<void>
  - uid: '@microsoft/sp-core-library.DeferredClass.shouldLoad'
    name: shouldLoad
    fullName: shouldLoad
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean shouldLoad
      return:
        type:
          - boolean
