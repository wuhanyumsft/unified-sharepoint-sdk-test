### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-core-library.Version'
    name: Version
    fullName: Version
    children:
      - '@microsoft/sp-core-library.Version.compare'
      - '@microsoft/sp-core-library.Version.equals'
      - '@microsoft/sp-core-library.Version.greaterThan'
      - '@microsoft/sp-core-library.Version.isValid'
      - '@microsoft/sp-core-library.Version.lessThan'
      - '@microsoft/sp-core-library.Version.major'
      - '@microsoft/sp-core-library.Version.minor'
      - '@microsoft/sp-core-library.Version.parse'
      - '@microsoft/sp-core-library.Version.patch'
      - '@microsoft/sp-core-library.Version.revision'
      - '@microsoft/sp-core-library.Version.satisfies'
      - '@microsoft/sp-core-library.Version.toString'
      - '@microsoft/sp-core-library.Version.tryParse'
    langs:
      - typeScript
    type: class
    summary: 'Represents a version number with two, three, or four parts.'
    source:
      path: Version.ts
      startLine: 19
      remote:
        path: spfx-core/sp-core-library/src\Version.ts
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-core-library'
    remarks: >-
      This class represents versions that follow the string format of
      MAJOR.MINOR[.PATCH[.REVISION]]

      where the MAJOR, MINOR, PATCH and REVISION parts are integers. PATCH and
      REVISION are optional.

      Leading zero digits are allowed, but they are discarded.  Missing parts
      are treated

      as zeroes for comparisons.


      Examples: 1.0, 1.0.0, 1.0.0.0, 1.01, 01.02.03, 001.002.003.004
  - uid: '@microsoft/sp-core-library.Version.compare'
    name: compare
    children: []
    type: method
    langs:
      - typeScript
    summary: Compares two Version objects to determine which version is newer.
    syntax:
      content: 'static function compare(v1: Version, v2: Version)'
      parameters:
        - id: v1
          type:
            - '@@microsoft/sp-core-library.Version'
          description: The first version class for comparison
        - id: v2
          type:
            - '@@microsoft/sp-core-library.Version'
          description: The second version class for comparison
      return:
        type:
          - number
  - uid: '@microsoft/sp-core-library.Version.equals'
    name: equals
    children: []
    type: method
    langs:
      - typeScript
    summary: Tests whether this version is equal to the input parameter.
    syntax:
      content: 'function equals(compareWith: Version)'
      parameters:
        - id: compareWith
          type:
            - '@@microsoft/sp-core-library.Version'
          description: The version to compare with
      return:
        type:
          - boolean
    remarks: |-
      Examples:

         1.0.0 equals 1.0.0 -> true;
         2.0.1 equals 2.0.0 -> false;
         3.0   equals 3.0.0 -> true;
         04.01 equals 4.1   -> true
  - uid: '@microsoft/sp-core-library.Version.greaterThan'
    name: greaterThan
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Tests whether this version is greater than (i.e. newer than) the input
      parameter.
    syntax:
      content: 'function greaterThan(compareWith: Version)'
      parameters:
        - id: compareWith
          type:
            - '@@microsoft/sp-core-library.Version'
          description: The version to compare with
      return:
        type:
          - boolean
    remarks: |-
      Examples:

         1.0.0 greaterThan 0.0.9 -> true;
         2.0   greaterThan 2.0.0 -> false;
         3.0.1 greaterThan 3.0   -> true
  - uid: '@microsoft/sp-core-library.Version.isValid'
    name: isValid
    children: []
    type: method
    langs:
      - typeScript
    summary: Test whether a string is a valid version specifier.
    syntax:
      content: 'static function isValid(versionString: string | undefined | null)'
      parameters:
        - id: versionString
          type:
            - string | undefined | null
          description: The version string
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-core-library.Version.lessThan'
    name: lessThan
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Tests whether this version is less than (i.e. older than) the input
      parameter.
    syntax:
      content: 'function lessThan(compareWith: Version)'
      parameters:
        - id: compareWith
          type:
            - '@@microsoft/sp-core-library.Version'
          description: The version to compare with
      return:
        type:
          - boolean
    remarks: |-
      Examples:

         0.9.9 lessThan 1.0.0 -> true;
         2.0   lessThan 2.0.0 -> false;
         3.0   lessThan 3.0.1 -> true;
         04.01 lessThan 4.1   -> false
  - uid: '@microsoft/sp-core-library.Version.major'
    name: major
    fullName: major
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns the first component of the version string.
    syntax:
      content: number major
      return:
        type:
          - number
    remarks: |-
      Typically a change in the major version number indicates a compatibility
      break with previous versions.
  - uid: '@microsoft/sp-core-library.Version.minor'
    name: minor
    fullName: minor
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns the second component of the version string.
    syntax:
      content: number minor
      return:
        type:
          - number
    remarks: |-
      Typically a change in the minor version number indicates that new features
      were added, while remaining backwards compatible with previous releases.
  - uid: '@microsoft/sp-core-library.Version.parse'
    name: parse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Constructs a new Version instance using the version string.  An exception
      is thrown

      if the string cannot be parsed.
    syntax:
      content: 'static function parse(versionString: string | undefined | null)'
      parameters:
        - id: versionString
          type:
            - string | undefined | null
          description: A version string
      return:
        type:
          - '@@microsoft/sp-core-library.Version'
  - uid: '@microsoft/sp-core-library.Version.patch'
    name: patch
    fullName: patch
    children: []
    langs:
      - typeScript
    type: property
    summary: 'The third number in the version string, or undefined if unspecified.'
    syntax:
      content: number | undefined patch
      return:
        type:
          - number | undefined
    remarks: |-
      Typically a change in the patch version number indicates a small fix that
      does not affect the compatibility contract for the library.  For a .NET
      System.Version object, this is referred to as the "build" number.
  - uid: '@microsoft/sp-core-library.Version.revision'
    name: revision
    fullName: revision
    children: []
    langs:
      - typeScript
    type: property
    summary: 'The fourth number in the version string, or undefined if unspecified.'
    syntax:
      content: number | undefined revision
      return:
        type:
          - number | undefined
    remarks: |-
      This number is not part of the Semantic Versioning (SemVer) standard used
      in JavaScript, but it is used by .NET version numbers.
  - uid: '@microsoft/sp-core-library.Version.satisfies'
    name: satisfies
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Tests whether this version satisfies the compatibility requirements of the
      input version,

      i.e. is backwards compatible.
    syntax:
      content: 'function satisfies(compareWith: Version)'
      parameters:
        - id: compareWith
          type:
            - '@@microsoft/sp-core-library.Version'
          description: The version to compare with
      return:
        type:
          - boolean
    remarks: >-
      In order to satisfy the compatibility requirements, this object must have
      the same

      major version number as the input parameter, and it must NOT be older than
      the

      input parameter.


      Examples:

         1.0.0 satisfies 1.0.0 -> true;
         1.1.0 satisfies 1.0.0 -> true;
         2.0.0 satisfies 1.0.0 -> false;
         1.0.0 satisfies 1.1.0 -> false
  - uid: '@microsoft/sp-core-library.Version.toString'
    name: toString
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a string representation of the version.
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
    remarks: >-
      The value is normalized and may be different from the original string
      (e.g. leading zeroes

      may be removed).  However, the number of version parts will be unchanged.
  - uid: '@microsoft/sp-core-library.Version.tryParse'
    name: tryParse
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Attempts to parse the input string to construct a new Version object.
      If the string cannot be parsed, then undefined is returned.
    syntax:
      content: 'static function tryParse(versionString: string | undefined | null)'
      parameters:
        - id: versionString
          type:
            - string | undefined | null
          description: A version string
      return:
        type:
          - Version | undefined
