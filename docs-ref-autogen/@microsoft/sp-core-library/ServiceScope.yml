### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-core-library.ServiceScope'
    name: ServiceScope
    fullName: ServiceScope
    children:
      - '@microsoft/sp-core-library.ServiceScope.consume'
      - '@microsoft/sp-core-library.ServiceScope.createAndProvide'
      - '@microsoft/sp-core-library.ServiceScope.createDefaultAndProvide'
      - '@microsoft/sp-core-library.ServiceScope.finish'
      - '@microsoft/sp-core-library.ServiceScope.getParent'
      - '@microsoft/sp-core-library.ServiceScope.provide'
      - '@microsoft/sp-core-library.ServiceScope.startNewChild'
      - '@microsoft/sp-core-library.ServiceScope.startNewRoot'
      - '@microsoft/sp-core-library.ServiceScope.whenFinished'
    langs:
      - typeScript
    type: class
    summary: The service locator pattern used by the SharePoint Framework.
    package: '@microsoft/sp-core-library'
  - uid: '@microsoft/sp-core-library.ServiceScope.consume'
    name: consume
    children: []
    type: method
    langs:
      - typeScript
    summary: Consumes a service from the service scope.
    syntax:
      content: 'function consume<T>(serviceKey: ServiceKey<T>)'
      parameters:
        - id: serviceKey
          type:
            - '@@microsoft/sp-core-library.ServiceKey<T>'
          description: >-
            the key that was used when provide() was called to register the
            service
      return:
        type:
          - T
  - uid: '@microsoft/sp-core-library.ServiceScope.createAndProvide'
    name: createAndProvide
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This is a shorthand function that is equivalent to constructing a new
      instance of the

      simpleServiceClass, then registering it by calling ServiceScope.provide().
    syntax:
      content: >-
        function createAndProvide<T>(serviceKey: ServiceKey<T>,
        simpleServiceClass: function)
      parameters:
        - id: serviceKey
          type:
            - '@@microsoft/sp-core-library.ServiceKey<T>'
          description: the key that can be used later to consume the service
        - id: simpleServiceClass
          type:
            - function
          description: the TypeScript class to be constructed
      return:
        type:
          - T
  - uid: '@microsoft/sp-core-library.ServiceScope.createDefaultAndProvide'
    name: createDefaultAndProvide
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This is a shorthand function that constructs the default implementation of
      the specified

      serviceKey, and then registers it by calling ServiceScope.provide().
    syntax:
      content: 'function createDefaultAndProvide<T>(serviceKey: ServiceKey<T>)'
      parameters:
        - id: serviceKey
          type:
            - '@@microsoft/sp-core-library.ServiceKey<T>'
          description: the key that can be used later to consume the service
      return:
        type:
          - T
  - uid: '@microsoft/sp-core-library.ServiceScope.finish'
    name: finish
    children: []
    type: method
    langs:
      - typeScript
    summary: Completes the initialization sequence for a service scope.
    syntax:
      content: function finish()
      parameters: []
  - uid: '@microsoft/sp-core-library.ServiceScope.getParent'
    name: getParent
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the parent of the current ServiceScope, or undefined if this is a
      root scope.
    syntax:
      content: function getParent()
      parameters: []
  - uid: '@microsoft/sp-core-library.ServiceScope.provide'
    name: provide
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a new service to a service scope.
    syntax:
      content: 'function provide<T>(serviceKey: ServiceKey<T>, service: T)'
      parameters:
        - id: serviceKey
          type:
            - '@@microsoft/sp-core-library.ServiceKey<T>'
          description: the key that will later be used to consume the service
        - id: service
          type:
            - T
          description: the service instance that is being registered
      return:
        type:
          - T
  - uid: '@microsoft/sp-core-library.ServiceScope.startNewChild'
    name: startNewChild
    children: []
    type: method
    langs:
      - typeScript
    summary: Constructs a new ServiceScope that is a child of the current scope.
    syntax:
      content: function startNewChild()
      parameters: []
      return:
        type:
          - '@@microsoft/sp-core-library.ServiceScope'
  - uid: '@microsoft/sp-core-library.ServiceScope.startNewRoot'
    name: startNewRoot
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new root-level ServiceScope.  Only root-level scopes have the
      ability to autocreate

      default implementations of ServiceKeys.
    syntax:
      content: static function startNewRoot()
      parameters: []
      return:
        type:
          - '@@microsoft/sp-core-library.ServiceScope'
  - uid: '@microsoft/sp-core-library.ServiceScope.whenFinished'
    name: whenFinished
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Defer an operation until after <xref:ServiceScope.finish> has completed.'
    syntax:
      content: 'function whenFinished(callback: () => void)'
      parameters:
        - id: callback
          type:
            - () => void
          description: |
            A block of code that needs to call ServiceScope.consume()
