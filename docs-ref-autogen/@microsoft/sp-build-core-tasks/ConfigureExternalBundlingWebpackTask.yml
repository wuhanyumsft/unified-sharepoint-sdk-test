### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask'
    name: ConfigureExternalBundlingWebpackTask
    fullName: ConfigureExternalBundlingWebpackTask
    children:
      - >-
        @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.constructor
      - >-
        @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.executeTask
      - >-
        @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.loadSchema
      - >-
        @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.setConfig
      - >-
        @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.tinkerWithBaseWebpackConfig
    langs:
      - typeScript
    type: class
    summary: >
      Configures the @microsoft/gulp-core-build-webpack task to bundle localized
      externals into another, pre-built package.

      Example:
       IN:
         setConfig({
           webpack: <reference to webpack task>,
           localizedResources: <optional - list of localized externals>
           configureWebpackTask: <reference to the ConfigureWebpackTask task>,
           debugLocale: <optional - locale to use for a debug build>,
           additionalLoaders: <optional - additional loaders for localized resources>
         })

       OUT:
         If any resources are specified and found, set webpack config to:
           {
             entry: <entries with locales>,
             module: {
               rules: ([
               ] <and additional loaders, if specified>,
               noParse: [ /\.map$/ ],
             },
             resolve: {
               alias: <localized resources>,
               modulesDirectories: [
                 '',
                 'node_modules',
                 'lib'
               ]
             },
             context: <dist directory>,
             devtool: 'source-map',
             externals: <externals and non-specified locales>,
             entry: webpackEntries,
             output: {
               libraryTarget: <library target from configureWebpackTask, if specified> or 'amd',
               path: this.outputDirectory
             },
             plugins: []
           }
    extends:
      name: >-
        @@microsoft/sp-build-core-tasks.OdspGulpTask<@@microsoft/sp-build-core-tasks.IConfigureExternalBundlingWebpackTaskConfig>
    package: '@microsoft/sp-build-core-tasks'
  - uid: >-
      @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.constructor
    name: ConfigureExternalBundlingWebpackTask
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: new ConfigureExternalBundlingWebpackTask()
      parameters: []
  - uid: >-
      @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.executeTask
    name: executeTask
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function executeTask(gulp: any, completeCallback: (error?: string) =>
        void)
      parameters:
        - id: gulp
          type:
            - any
          description: ''
        - id: completeCallback
          type:
            - '(error?: string) => void'
          description: ''
      return:
        type:
          - ReadWriteStream
  - uid: >-
      @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.loadSchema
    name: loadSchema
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function loadSchema()
      parameters: []
      return:
        type:
          - Object
  - uid: >-
      @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.setConfig
    name: setConfig
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setConfig(config: IConfigureExternalBundlingWebpackTaskConfig)'
      parameters:
        - id: config
          type:
            - >-
              @@microsoft/sp-build-core-tasks.IConfigureExternalBundlingWebpackTaskConfig
          description: ''
  - uid: >-
      @microsoft/sp-build-core-tasks.ConfigureExternalBundlingWebpackTask.tinkerWithBaseWebpackConfig
    name: tinkerWithBaseWebpackConfig
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Modify the base webpack config to make sure we get what we need after that
      webpack instance runs.
    syntax:
      content: 'function tinkerWithBaseWebpackConfig(config: Configuration)'
      parameters:
        - id: config
          type:
            - Configuration
          description: ''
