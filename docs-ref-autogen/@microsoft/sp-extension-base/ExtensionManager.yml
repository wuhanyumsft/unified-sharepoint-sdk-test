### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-extension-base.ExtensionManager'
    name: ExtensionManager
    fullName: ExtensionManager<TExtension>
    children:
      - '@microsoft/sp-extension-base.ExtensionManager.createExtension'
      - '@microsoft/sp-extension-base.ExtensionManager.dispose'
      - '@microsoft/sp-extension-base.ExtensionManager.constructor'
      - '@microsoft/sp-extension-base.ExtensionManager.waitForInitialization'
    langs:
      - typeScript
    type: class
    summary: >-
      ExtensionManager manages a collection of extensions and provides APIs to
      create, dispose

      and access its managed extensions.
    source:
      path: ExtensionManager.ts
      startLine: 46
      remote:
        path: spfx-core/sp-extension-base/src\ExtensionManager.ts
        repo: >-
          https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-client
        branch: master
    package: '@microsoft/sp-extension-base'
    remarks: >-
      Any application that needs to use extensions, should use ExtensionManager
      to create those extensions

      by passing in their componentID and properties. ExtensionManager takes
      care of loading modules and

      creating the instances for the extensions and provides APIs to manage the
      created extensions.
  - uid: '@microsoft/sp-extension-base.ExtensionManager.createExtension'
    name: createExtension
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an extension instance by loading its module based on the provided
      componentId and then creates an instance

      of the extension by passing in the provided properties JSON and context
      creator.
    syntax:
      content: >-
        function createExtension(componentId: string, propertiesJson: string |
        undefined, contextCreator: (extensionContextParameters:
        IExtensionContextParameters) => ExtensionContext)
      parameters:
        - id: componentId
          type:
            - string
          description: the client-side component ID for the extension.
        - id: propertiesJson
          type:
            - string | undefined
          description: a text string containing an optional JSON object.
        - id: contextCreator
          type:
            - >-
              (extensionContextParameters: IExtensionContextParameters) =>
              ExtensionContext
          description: |
            a callback function that constructs an appropriate ExtensionContext
      return:
        type:
          - Promise<TExtension>
    remarks: >-
      The provided componentId is a Guid that identifies the module containing
      the extension (as its default export).

      The module loader of SharePoint Framework will load the module if its
      manifest is found on the page

      (for example, if the extension is installed) and create an instace of the
      extension and initialize it using

      the provided contextCreator and propertiesJson. Since this process is
      asynchronous, the manager returns a promise

      that resolves once the extension instance is ready.


      The extension will be disposed by ExtensionManager.dispose().
  - uid: '@microsoft/sp-extension-base.ExtensionManager.dispose'
    name: dispose
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Disposes any extensions that were created via createExtension().  This is
      performed by calling

      BaseExtension.dispose() for each extension.
    syntax:
      content: function dispose()
      parameters: []
  - uid: '@microsoft/sp-extension-base.ExtensionManager.constructor'
    name: ExtensionManager
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new instance of ExtensionManager.
    syntax:
      content: 'new ExtensionManager(serviceScope: ServiceScope, expectedType: Function)'
      parameters:
        - id: serviceScope
          type:
            - ServiceScope
          description: The serviceScope provided by the caller application
        - id: expectedType
          type:
            - Function
          description: |
            for validation purposes, a base class that the resulting object
              is expected to extend
    remarks: >-
      If you construct an instance of this class, you must dispose it by calling
      ExtensionManager.dispose();

      otherwise resource leaks may occur.
  - uid: '@microsoft/sp-extension-base.ExtensionManager.waitForInitialization'
    name: waitForInitialization
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      For all extensions that have been created so far by createExtension(),
      this waits

      for them all to finish initializing, and then returns the list of
      initialized extension

      objects.
    syntax:
      content: function waitForInitialization()
      parameters: []
      return:
        type:
          - 'Promise<TExtension[]>'
