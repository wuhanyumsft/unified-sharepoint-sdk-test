### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-module-interfaces.IClientSideComponentManifest'
    name: IClientSideComponentManifest
    fullName: IClientSideComponentManifest
    children:
      - '@microsoft/sp-module-interfaces.IClientSideComponentManifest.alias'
      - >-
        @microsoft/sp-module-interfaces.IClientSideComponentManifest.componentType
      - '@microsoft/sp-module-interfaces.IClientSideComponentManifest.id'
      - '@microsoft/sp-module-interfaces.IClientSideComponentManifest.isInternal'
      - >-
        @microsoft/sp-module-interfaces.IClientSideComponentManifest.loaderConfig
      - >-
        @microsoft/sp-module-interfaces.IClientSideComponentManifest.manifestVersion
      - >-
        @microsoft/sp-module-interfaces.IClientSideComponentManifest.requiresCustomScript
      - >-
        @microsoft/sp-module-interfaces.IClientSideComponentManifest.safeWithCustomScriptDisabled
      - '@microsoft/sp-module-interfaces.IClientSideComponentManifest.version'
    langs:
      - typeScript
    type: interface
    summary: >
      All client side components built on the SharePoint framework need a valid
      component manifest. This interface

      represents properties that are required by all types of client side
      components like Applications and Web Parts.

      Component specific manifests will extend this interface to add properties
      required by that component type.

      The schema of this manifest is owned and versioned by Microsoft. Following
      rules should be followed while changing

      this schema. This set of rules can also be called the "manifest upgrade
      rules".

        -  For minor changes, new properties can be added to this schema in a backwards-compatible way. i.e. the code
           that processes the manifest should be able to handle the absence of those new properties.
        -  Try to model your changes as minor SemVer increments.  Major version changes should be avoided because they
           impose a migration cost on developers.
        -  The 'manifestVersion' should be bumped for all small or big changes.
    package: '@microsoft/sp-module-interfaces'
  - uid: '@microsoft/sp-module-interfaces.IClientSideComponentManifest.alias'
    name: alias
    fullName: alias
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Definition: A short name usually given by developer. It does not need to
      be localized and is expected to stay

      the same through the lifetime of the component. If an application
      overrides the ClientSideApplication.alias

      property, ClientSideApplication.alias is given precedence over the value
      provided in the manifest.

      Usage: A short name to identify a client side component by developer.

      Required: no

      Localized: no

      Supported values: Allowed characters are a-z, A-Z, and '-'. Not longer
      than 40 characters.

      Example: "NewFeed"
    syntax:
      content: string alias
      return:
        type:
          - string
  - uid: '@microsoft/sp-module-interfaces.IClientSideComponentManifest.componentType'
    name: componentType
    fullName: componentType
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Definition: Type of client side component. Components with the
      "Application" type are defined by the
       "IClientSideApplicationManifest" interface. Components with the "WebPart" type are defined by the
       "IClientSideWebPartManifest" interface. Components with the "Library" type are defined by the
       "IClientSideLibraryManifest" interface.
      Usage: To help bundling, loading, enumeration, and initialization of
      components based on their contents.

      Required: yes

      Localized: no

      Supported values: "Application", "WebPart", "Library", "Extension"

      Example: "Application"
    syntax:
      content: function componentType
      return:
        type:
          - function
  - uid: '@microsoft/sp-module-interfaces.IClientSideComponentManifest.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Definition: A universally unique component id. Each client side component
      is required to have this id. Once an
       id has been used for a component, it cannot be changed. A change in this value is treated same as the creation of
       a new component. Two components are never expected to have the same id.
      Usage: Uniquely identify a client side component.

      Required: yes

      Localized: no

      Supported values: any GUID

      Example: "dbef608d-3ad5-4f8f-b139-d916f2f0a294"
    syntax:
      content: string id
      return:
        type:
          - string
  - uid: '@microsoft/sp-module-interfaces.IClientSideComponentManifest.isInternal'
    name: isInternal
    fullName: isInternal
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Definition: An auto-generated value for internal use. Do not add or use
      it.

      Usage: Not to be used by third party developers.

      Required: no
    syntax:
      content: boolean isInternal
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-module-interfaces.IClientSideComponentManifest.loaderConfig'
    name: loaderConfig
    fullName: loaderConfig
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Definition: This portion of the configuration describes how the component
      is to be loaded and initialized by a
       client. It contains an enumeration of scripts that the component requires along with a single entrypoint script.
      Usage: Loading a component.

      Required: yes
    syntax:
      content: IClientSideComponentLoaderConfiguration loaderConfig
      return:
        type:
          - >-
            @@microsoft/sp-module-interfaces.IClientSideComponentLoaderConfiguration
  - uid: >-
      @microsoft/sp-module-interfaces.IClientSideComponentManifest.manifestVersion
    name: manifestVersion
    fullName: manifestVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Definition: Version of the component manifest schema. The value of this
      field is controlled by Microsoft. The
       purpose of this field is to help manage upgrades of the component manifest schema. A component developer needs to
       only confirm that they are using the correct value per the manifest schema. Please read the "manifest upgrade
       rules" for more details on when the schema could change. Note, manifest schema version upgrade will be considered
       a big API change event and will be advertised broadly.
      Usage: To help support multiple manifest schema versions.

      Required: yes

      Localized: no

      Supported values: Positive integer.

      Example: 1
    syntax:
      content: number manifestVersion
      return:
        type:
          - number
  - uid: >-
      @microsoft/sp-module-interfaces.IClientSideComponentManifest.requiresCustomScript
    name: requiresCustomScript
    fullName: requiresCustomScript
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Definition: If true, the component can only be installed on sites where
      Custom Script is enabled.
       This should be set to true if the component allows authors to execute arbitrary scripts on the page.
       See https://support.office.com/en-us/article/Turn-scripting-capabilities-on-or-off-1f2c515f-5d7e-448a-9fd7-835da935584f for more information.
       Defaults to false.
      Usage: Requires Custom Script to be allowed in order for this component to
      be installed and run.

      Required: no

      Localized: no

      Supported values: true or false

      Example: false
    syntax:
      content: boolean requiresCustomScript
      return:
        type:
          - boolean
  - uid: >-
      @microsoft/sp-module-interfaces.IClientSideComponentManifest.safeWithCustomScriptDisabled
    name: safeWithCustomScriptDisabled
    fullName: safeWithCustomScriptDisabled
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      This property is provided for backwards compatibility.  It no longer has
      any effect.
    syntax:
      content: boolean safeWithCustomScriptDisabled
      return:
        type:
          - boolean
    deprecated:
      content: Use requiresCustomScript instead of safeWithCustomScriptDisabled.
  - uid: '@microsoft/sp-module-interfaces.IClientSideComponentManifest.version'
    name: version
    fullName: version
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Definition: Client side component version. The value of this field is
      expected to be controlled by the developer
       of the client side component. The purpose of this field is to help client side component developers upgrade their
       client side components in a managed way. This helps the consumers of the client side component make decisions
       about when and how to upgrade the client side component. As the developer evolves the code for their client side
       component, they can decide to bump the MAJOR, MINOR or PATCH version of the component. All incompatible API
       changes should result in a MAJOR version bump. Backwards compatible functionality changes should result in a
       MINOR version bump, and backwards compatible bug fixes should result in a PATCH version bump. Please see
       http://semver.org for more details on how to manage the version of your components.
      Usage: Versioning and evolving a client side component safely in a
      controlled way.

      Required: yes

      Localized: no

      Supported values: string representing a semantic version
      (http://semver.org) i.e. MAJOR.MINOR.PATCH

      Example: "1.0.0"
    syntax:
      content: string version
      return:
        type:
          - string
